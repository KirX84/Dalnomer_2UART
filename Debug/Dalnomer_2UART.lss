
Dalnomer_2UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000578  0000060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800118  00800118  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbe  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096c  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d1  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b5  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000323  00000000  00000000  00002a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c1       	rjmp	.+708    	; 0x312 <__vector_19>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	99 c1       	rjmp	.+818    	; 0x3a4 <__vector_28>
  72:	00 00       	nop
  74:	05 c1       	rjmp	.+522    	; 0x280 <__vector_29>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e7       	ldi	r30, 0x78	; 120
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 31       	cpi	r26, 0x18	; 24
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e1       	ldi	r26, 0x18	; 24
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 33       	cpi	r26, 0x3E	; 62
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	74 d0       	rcall	.+232    	; 0x1d0 <main>
  e8:	45 c2       	rjmp	.+1162   	; 0x574 <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <_Z13UART_SendDataPhh>:
unsigned char numOfDataSended;
unsigned char numOfDataSendedUSB;
unsigned char numOfDataReceived;
/***************************************************************************************/
void UART_SendData(uint8_t *pSendData, uint8_t nNumOfDataToSend)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <_Z13UART_SendDataPhh+0x6>
  f2:	1f 92       	push	r1
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	6b 83       	std	Y+3, r22	; 0x03
    sendDataPtr = pSendData;
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <sendDataPtr+0x1>
 106:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <sendDataPtr>
    numOfDataToSend = nNumOfDataToSend;
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <numOfDataToSend>
	//uart_send(pSendData);
    numOfDataSended = 0;
 110:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <numOfDataSended>
    readyToExchange = false;
 114:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <readyToExchange>
    UCSR1B |= (1 << UDRIE1);
 118:	89 ec       	ldi	r24, 0xC9	; 201
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	29 ec       	ldi	r18, 0xC9	; 201
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	20 62       	ori	r18, 0x20	; 32
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
}
 12a:	00 00       	nop
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <_Z16UART_SendDataUSBPhh>:
/***************************************************************************************/
void UART_SendDataUSB(uint8_t *pSendData, uint8_t nNumOfDataToSend)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <_Z16UART_SendDataUSBPhh+0x6>
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	6b 83       	std	Y+3, r22	; 0x03
	sendDataPtrUSB = pSendData;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <sendDataPtrUSB+0x1>
 152:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sendDataPtrUSB>
	numOfDataToSendUSB = nNumOfDataToSend;
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <numOfDataToSendUSB>
	numOfDataSendedUSB = 0;
 15c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <numOfDataSendedUSB>
	readyToExchangeUSB = false;
 160:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <readyToExchangeUSB>
	UCSR0B |= (1 << UDRIE0);
 164:	81 ec       	ldi	r24, 0xC1	; 193
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	21 ec       	ldi	r18, 0xC1	; 193
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	20 62       	ori	r18, 0x20	; 32
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
}
 176:	00 00       	nop
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <_Z16UART_ReceiveDataPhh>:
/***************************************************************************************/
void UART_ReceiveData(uint8_t* pReceivedData, uint8_t nNumOfDataToReceive)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <_Z16UART_ReceiveDataPhh+0x6>
 18a:	1f 92       	push	r1
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	6b 83       	std	Y+3, r22	; 0x03
    receivedDataPtr = pReceivedData;
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <receivedDataPtr+0x1>
 19e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <receivedDataPtr>
    numOfDataToReceive = nNumOfDataToReceive;
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <numOfDataToReceive>
    numOfDataReceived = 0;
 1a8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <numOfDataReceived>
    readyToExchangeRec = false;
 1ac:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <readyToExchangeRec>
    UCSR1B |= (1 << RXCIE1);
 1b0:	89 ec       	ldi	r24, 0xC9	; 201
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	29 ec       	ldi	r18, 0xC9	; 201
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	20 68       	ori	r18, 0x80	; 128
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
}
 1c2:	00 00       	nop
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:
/***************************************************************************************/
int main(void)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
    sei();
 1d8:	78 94       	sei

	UBRR0H = 0;
 1da:	85 ec       	ldi	r24, 0xC5	; 197
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	fc 01       	movw	r30, r24
 1e0:	10 82       	st	Z, r1
	UBRR0L = 103; //скорость 9600
 1e2:	84 ec       	ldi	r24, 0xC4	; 196
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	27 e6       	ldi	r18, 0x67	; 103
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
	//UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<UDRIE0); // разрешаем прием, передачу и прерывания по окончанию приема и опустошению буфера
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // разрешаем прием, передачу
 1ec:	81 ec       	ldi	r24, 0xC1	; 193
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	28 e1       	ldi	r18, 0x18	; 24
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); //8 бит, 1 стоп бит
 1f6:	82 ec       	ldi	r24, 0xC2	; 194
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	26 e0       	ldi	r18, 0x06	; 6
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
	UBRR1H = 0;
 200:	8d ec       	ldi	r24, 0xCD	; 205
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	10 82       	st	Z, r1
	UBRR1L = 103; //скорость 9600
 208:	8c ec       	ldi	r24, 0xCC	; 204
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	27 e6       	ldi	r18, 0x67	; 103
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
	//UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1)|(1<<UDRIE1); // разрешаем прием, передачу и прерывания по окончанию приема и опустошению буфера
	UCSR1B = (1<<RXEN1)|(1<<TXEN1); // разрешаем прием, передачу
 212:	89 ec       	ldi	r24, 0xC9	; 201
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	28 e1       	ldi	r18, 0x18	; 24
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10); //8 бит, 1 стоп бит
 21c:	8a ec       	ldi	r24, 0xCA	; 202
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	26 e0       	ldi	r18, 0x06	; 6
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
	UBRR0 = AVR_USART_9600_VALUE;
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
	//uart_init();
	//UCSR1B |= (1 << RXEN1) | (1 << RXCIE1);
	//_delay_ms(10);*/
	UART_SendData(Lazer_0c,5);
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	5f df       	rcall	.-322    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 22e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <readyToExchange>
 232:	88 23       	and	r24, r24
 234:	09 f4       	brne	.+2      	; 0x238 <main+0x68>
 236:	fb cf       	rjmp	.-10     	; 0x22e <main+0x5e>
	//_delay_ms(10);
	UART_SendData(Lazer_1g,5);
 238:	65 e0       	ldi	r22, 0x05	; 5
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	56 df       	rcall	.-340    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 240:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <readyToExchange>
 244:	88 23       	and	r24, r24
 246:	09 f4       	brne	.+2      	; 0x24a <main+0x7a>
 248:	fb cf       	rjmp	.-10     	; 0x240 <main+0x70>
	//_delay_ms(10);
	UART_SendData(Lazer_start,4);
 24a:	64 e0       	ldi	r22, 0x04	; 4
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	4d df       	rcall	.-358    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 252:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <readyToExchange>
 256:	88 23       	and	r24, r24
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x8c>
 25a:	fb cf       	rjmp	.-10     	; 0x252 <main+0x82>
	"\x67\x30\x73\x76\x2B\x30\x30",
	 sizeof testBuffer);*/
	//testBuffer = {0x67, 0x30, 0x73, 0x76, 0x2B, 0x30, 0x30};
    while(1)
    {
        UART_ReceiveData(Otvet_Lazer, 12);
 25c:	6c e0       	ldi	r22, 0x0C	; 12
 25e:	88 e1       	ldi	r24, 0x18	; 24
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	90 df       	rcall	.-224    	; 0x184 <_Z16UART_ReceiveDataPhh>
		while(!readyToExchangeRec);
 264:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <readyToExchangeRec>
 268:	88 23       	and	r24, r24
 26a:	09 f4       	brne	.+2      	; 0x26e <main+0x9e>
		//_delay_ms(150);
		UART_SendDataUSB(Otvet_Lazer_TXT, 8);
 26c:	fb cf       	rjmp	.-10     	; 0x264 <main+0x94>
 26e:	68 e0       	ldi	r22, 0x08	; 8
 270:	84 e2       	ldi	r24, 0x24	; 36
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	61 df       	rcall	.-318    	; 0x138 <_Z16UART_SendDataUSBPhh>
		while(!readyToExchangeUSB);
 276:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <readyToExchangeUSB>
 27a:	88 23       	and	r24, r24
 27c:	79 f7       	brne	.-34     	; 0x25c <main+0x8c>
 27e:	fb cf       	rjmp	.-10     	; 0x276 <main+0xa6>

00000280 <__vector_29>:
		//_delay_ms(150);
    }
}
/***************************************************************************************/
ISR(USART1_UDRE_vect)
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
    UDR1 = *sendDataPtr;
 2a0:	8e ec       	ldi	r24, 0xCE	; 206
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <sendDataPtr>
 2a8:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <sendDataPtr+0x1>
 2ac:	f9 01       	movw	r30, r18
 2ae:	20 81       	ld	r18, Z
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
    sendDataPtr++;
 2b4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <sendDataPtr>
 2b8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <sendDataPtr+0x1>
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <sendDataPtr+0x1>
 2c2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <sendDataPtr>
    numOfDataSended++;
 2c6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <numOfDataSended>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <numOfDataSended>
    
    if (numOfDataSended == numOfDataToSend)
 2d0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <numOfDataSended>
 2d4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <numOfDataToSend>
 2d8:	98 17       	cp	r25, r24
 2da:	61 f4       	brne	.+24     	; 0x2f4 <__vector_29+0x74>
    {
        UCSR1B &= ~(1 << UDRIE1);
 2dc:	89 ec       	ldi	r24, 0xC9	; 201
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	29 ec       	ldi	r18, 0xC9	; 201
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	f9 01       	movw	r30, r18
 2e6:	20 81       	ld	r18, Z
 2e8:	2f 7d       	andi	r18, 0xDF	; 223
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
        readyToExchange = 1;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <readyToExchange>
    }
}
 2f4:	00 00       	nop
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_19>:
/***************************************************************************************/
ISR(USART0_UDRE_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
	UDR0 = *sendDataPtrUSB;
 332:	86 ec       	ldi	r24, 0xC6	; 198
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <sendDataPtrUSB>
 33a:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <sendDataPtrUSB+0x1>
 33e:	f9 01       	movw	r30, r18
 340:	20 81       	ld	r18, Z
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
	sendDataPtrUSB++;
 346:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sendDataPtrUSB>
 34a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sendDataPtrUSB+0x1>
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <sendDataPtrUSB+0x1>
 354:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sendDataPtrUSB>
	numOfDataSendedUSB++;
 358:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <numOfDataSendedUSB>
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <numOfDataSendedUSB>
	
	if (numOfDataSendedUSB == numOfDataToSendUSB)
 362:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <numOfDataSendedUSB>
 366:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <numOfDataToSendUSB>
 36a:	98 17       	cp	r25, r24
 36c:	61 f4       	brne	.+24     	; 0x386 <__vector_19+0x74>
	{
		UCSR0B &= ~(1 << UDRIE0);
 36e:	81 ec       	ldi	r24, 0xC1	; 193
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	21 ec       	ldi	r18, 0xC1	; 193
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	f9 01       	movw	r30, r18
 378:	20 81       	ld	r18, Z
 37a:	2f 7d       	andi	r18, 0xDF	; 223
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
		readyToExchangeUSB = 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <readyToExchangeUSB>
	}
}
 386:	00 00       	nop
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <__vector_28>:
/***************************************************************************************/
ISR(USART1_RX_vect)
{
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	2f 93       	push	r18
 3b2:	3f 93       	push	r19
 3b4:	4f 93       	push	r20
 3b6:	5f 93       	push	r21
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	00 d0       	rcall	.+0      	; 0x3c6 <__vector_28+0x22>
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <__vector_28+0x24>
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
		UCSR1B &= ~((1 << RXCIE1) | (1 << RXEN1));
		readyToExchangeRec = 1;
	}*/


    Otvet_Lazer[0] = Otvet_Lazer[1];
 3cc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__data_end+0x1>
 3d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
    Otvet_Lazer[1] = Otvet_Lazer[2];
 3d4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 3d8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <__data_end+0x1>
    Otvet_Lazer[2] = Otvet_Lazer[3];
 3dc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__data_end+0x3>
 3e0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x2>
    Otvet_Lazer[3] = Otvet_Lazer[4];
 3e4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end+0x4>
 3e8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <__data_end+0x3>
    Otvet_Lazer[4] = Otvet_Lazer[5];
 3ec:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <__data_end+0x5>
 3f0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end+0x4>
    Otvet_Lazer[5] = Otvet_Lazer[6];
 3f4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end+0x6>
 3f8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <__data_end+0x5>
    Otvet_Lazer[6] = Otvet_Lazer[7];
 3fc:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <__data_end+0x7>
 400:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end+0x6>
    Otvet_Lazer[7] = Otvet_Lazer[8];
 404:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end+0x8>
 408:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <__data_end+0x7>
    Otvet_Lazer[8] = Otvet_Lazer[9];
 40c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__data_end+0x9>
 410:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end+0x8>
    Otvet_Lazer[9] = Otvet_Lazer[10];
 414:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end+0xa>
 418:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__data_end+0x9>
    Otvet_Lazer[10] = Otvet_Lazer[11];
 41c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__data_end+0xb>
 420:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end+0xa>
    Otvet_Lazer[11] = UDR1;
 424:	8e ec       	ldi	r24, 0xCE	; 206
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	fc 01       	movw	r30, r24
 42a:	80 81       	ld	r24, Z
 42c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <__data_end+0xb>

	//UART_SendDataUSB(Otvet_Lazer, 12);
    //*receivedDataPtr = UDR1;

	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E)) 
 430:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 434:	80 38       	cpi	r24, 0x80	; 128
 436:	09 f0       	breq	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	88 c0       	rjmp	.+272    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 43a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__data_end+0x1>
 43e:	86 30       	cpi	r24, 0x06	; 6
 440:	09 f0       	breq	.+2      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 442:	83 c0       	rjmp	.+262    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 444:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 448:	83 38       	cpi	r24, 0x83	; 131
 44a:	09 f0       	breq	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44c:	7e c0       	rjmp	.+252    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 44e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__data_end+0x3>
 452:	80 33       	cpi	r24, 0x30	; 48
 454:	09 f0       	breq	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 456:	79 c0       	rjmp	.+242    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 458:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end+0x6>
 45c:	8e 32       	cpi	r24, 0x2E	; 46
 45e:	09 f0       	breq	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 460:	74 c0       	rjmp	.+232    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
 462:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__data_end+0x1>
 46e:	88 2f       	mov	r24, r24
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	28 0f       	add	r18, r24
 474:	39 1f       	adc	r19, r25
 476:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 47a:	88 2f       	mov	r24, r24
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	28 0f       	add	r18, r24
 480:	39 1f       	adc	r19, r25
 482:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__data_end+0x3>
 486:	88 2f       	mov	r24, r24
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	82 0f       	add	r24, r18
 48c:	93 1f       	adc	r25, r19
 48e:	9a 83       	std	Y+2, r25	; 0x02
 490:	89 83       	std	Y+1, r24	; 0x01
		Error_j = 0;
 492:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <Error_j>
		for (int i=0; i <= 6; i++) 
 496:	1c 82       	std	Y+4, r1	; 0x04
 498:	1b 82       	std	Y+3, r1	; 0x03
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	9c 81       	ldd	r25, Y+4	; 0x04
 49e:	07 97       	sbiw	r24, 0x07	; 7
 4a0:	8c f5       	brge	.+98     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		{
			j = Otvet_Lazer[i+4];
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	9c 81       	ldd	r25, Y+4	; 0x04
 4a6:	04 96       	adiw	r24, 0x04	; 4
 4a8:	88 5e       	subi	r24, 0xE8	; 232
 4aa:	9e 4f       	sbci	r25, 0xFE	; 254
 4ac:	fc 01       	movw	r30, r24
 4ae:	80 81       	ld	r24, Z
 4b0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <j>
			CS=CS+j;
 4b4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <j>
 4b8:	88 2f       	mov	r24, r24
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	29 81       	ldd	r18, Y+1	; 0x01
 4be:	3a 81       	ldd	r19, Y+2	; 0x02
 4c0:	82 0f       	add	r24, r18
 4c2:	93 1f       	adc	r25, r19
 4c4:	9a 83       	std	Y+2, r25	; 0x02
 4c6:	89 83       	std	Y+1, r24	; 0x01
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
 4c8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <j>
 4cc:	80 33       	cpi	r24, 0x30	; 48
 4ce:	20 f0       	brcs	.+8      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <j>
 4d4:	8b 33       	cpi	r24, 0x3B	; 59
 4d6:	20 f0       	brcs	.+8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4d8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <j>
 4dc:	8e 32       	cpi	r24, 0x2E	; 46
 4de:	49 f4       	brne	.+18     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4e0:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <j>
 4e4:	8b 81       	ldd	r24, Y+3	; 0x03
 4e6:	9c 81       	ldd	r25, Y+4	; 0x04
 4e8:	8c 5d       	subi	r24, 0xDC	; 220
 4ea:	9e 4f       	sbci	r25, 0xFE	; 254
 4ec:	fc 01       	movw	r30, r24
 4ee:	20 83       	st	Z, r18
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
			else Error_j=1;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Error_j>

	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E)) 
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		Error_j = 0;
		for (int i=0; i <= 6; i++) 
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	9c 81       	ldd	r25, Y+4	; 0x04
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	9c 83       	std	Y+4, r25	; 0x04
 500:	8b 83       	std	Y+3, r24	; 0x03
 502:	cb cf       	rjmp	.-106    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			j = Otvet_Lazer[i+4];
			CS=CS+j;
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			else Error_j=1;
		}
		if ((Error_j == 0) && (256 - CS % 256 == Otvet_Lazer[11])) 
 504:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Error_j>
 508:	88 23       	and	r24, r24
 50a:	f9 f4       	brne	.+62     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	9a 81       	ldd	r25, Y+2	; 0x02
 510:	90 78       	andi	r25, 0x80	; 128
 512:	99 23       	and	r25, r25
 514:	1c f4       	brge	.+6      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	9f 6f       	ori	r25, 0xFF	; 255
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	9c 01       	movw	r18, r24
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	ac 01       	movw	r20, r24
 524:	42 1b       	sub	r20, r18
 526:	53 0b       	sbc	r21, r19
 528:	9a 01       	movw	r18, r20
 52a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__data_end+0xb>
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	28 17       	cp	r18, r24
 534:	39 07       	cpc	r19, r25
 536:	49 f4       	brne	.+18     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
		{
			Otvet_Lazer_TXT[7] = 0x0D;              //Ставим символ переноса в конце строки
 538:	8d e0       	ldi	r24, 0x0D	; 13
 53a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Otvet_Lazer_TXT+0x7>
			Otvet_Lazer_TXT[2] = 0x2C;              //Ставим запятую вместо точки в число на выдачу
 53e:	8c e2       	ldi	r24, 0x2C	; 44
 540:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Otvet_Lazer_TXT+0x2>
			//UART_SendDataUSB(Otvet_Lazer_TXT, 8);
			//while(!readyToExchangeUSB);
			//_delay_ms(150);
			readyToExchangeRec = 1;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <readyToExchangeRec>
    /*if (numOfDataReceived == numOfDataToReceive)
    {
        UCSR1B &= ~((1 << RXCIE1) | (1 << RXEN1));
        readyToExchangeUSB = 1;
    }*/
}
 54a:	00 00       	nop
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <_exit>:
 574:	f8 94       	cli

00000576 <__stop_program>:
 576:	ff cf       	rjmp	.-2      	; 0x576 <__stop_program>
