
Dalnomer_2UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000be2  00000c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080014c  0080014c  00000ce2  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00000ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000d58  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011de  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009f3  00000000  00000000  00001fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000765  00000000  00000000  000029a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000936  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000041a  00000000  00000000  00003c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	6d c4       	rjmp	.+2266   	; 0x924 <__vector_18>
  4a:	00 00       	nop
  4c:	3a c3       	rjmp	.+1652   	; 0x6c2 <__vector_19>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	71 c3       	rjmp	.+1762   	; 0x754 <__vector_28>
  72:	00 00       	nop
  74:	dd c2       	rjmp	.+1466   	; 0x630 <__vector_29>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 ee       	ldi	r30, 0xE2	; 226
  c8:	fb e0       	ldi	r31, 0x0B	; 11
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 34       	cpi	r26, 0x4C	; 76
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e4       	ldi	r26, 0x4C	; 76
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 37       	cpi	r26, 0x74	; 116
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	4e d0       	rcall	.+156    	; 0x184 <main>
  e8:	7a c5       	rjmp	.+2804   	; 0xbde <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <_Z16UART_SendDataUSBPhh>:
    receivedDataPtr = pReceivedData;
    numOfDataToReceive = nNumOfDataToReceive;
    numOfDataReceived = 0;
    readyToExchangeRec = false;
    UCSR1B |= (1 << RXCIE1);
}
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <_Z16UART_SendDataUSBPhh+0x6>
  f2:	1f 92       	push	r1
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	6b 83       	std	Y+3, r22	; 0x03
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <sendDataPtrUSB+0x1>
 106:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <sendDataPtrUSB>
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <numOfDataToSendUSB>
 110:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <numOfDataSendedUSB>
 114:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <readyToExchangeUSB>
 118:	81 ec       	ldi	r24, 0xC1	; 193
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	21 ec       	ldi	r18, 0xC1	; 193
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	20 62       	ori	r18, 0x20	; 32
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	00 00       	nop
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <_Z19UART_ReceiveDataUSBPhh>:
/***************************************************************************************/
void UART_ReceiveDataUSB(uint8_t* pReceivedData, uint8_t nNumOfDataToReceive)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <_Z19UART_ReceiveDataUSBPhh+0x6>
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	6b 83       	std	Y+3, r22	; 0x03
	receivedDataPtrUSB = pReceivedData;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <receivedDataPtrUSB+0x1>
 152:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <receivedDataPtrUSB>
	numOfDataToReceiveUSB = nNumOfDataToReceive;
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <numOfDataToReceiveUSB>
	numOfDataReceivedUSB = 0;
 15c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <numOfDataReceivedUSB>
	readyToExchangeRecUSB = false;
 160:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <readyToExchangeRecUSB>
	UCSR0B |= (1 << RXCIE0);
 164:	81 ec       	ldi	r24, 0xC1	; 193
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	21 ec       	ldi	r18, 0xC1	; 193
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	20 68       	ori	r18, 0x80	; 128
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
}
 176:	00 00       	nop
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <main>:
/***************************************************************************************/
int main(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	aa 97       	sbiw	r28, 0x2a	; 42
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
    DDRB |= 1<<5;
 198:	84 e2       	ldi	r24, 0x24	; 36
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	24 e2       	ldi	r18, 0x24	; 36
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	20 62       	ori	r18, 0x20	; 32
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18

	if(eeprom_read_byte(&num_dal_addr) == 0xFFFF) num_dal = 0;
	else num_dal = eeprom_read_byte(&num_dal_addr);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0f d5       	rcall	.+2590   	; 0xbce <eeprom_read_byte>
 1b0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <num_dal>
	if(eeprom_read_byte(&op_mode_addr) == 0xFFFF) op_mode = 0;
	else num_dal = eeprom_read_byte(&op_mode_addr);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0a d5       	rcall	.+2580   	; 0xbce <eeprom_read_byte>
 1ba:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <num_dal>
	if(!(num_dal/10))
 1be:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <num_dal>
 1c2:	8a 30       	cpi	r24, 0x0A	; 10
 1c4:	a8 f4       	brcc	.+42     	; 0x1f0 <main+0x6c>
	{
		Zapros_one_zam_one[1] = '0x30' + num_dal;
 1c6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <num_dal>
 1ca:	80 5d       	subi	r24, 0xD0	; 208
 1cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		Zapros_nepr_zam_one[1] = '0x30'+ num_dal;
 1d0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <num_dal>
 1d4:	80 5d       	subi	r24, 0xD0	; 208
 1d6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Zapros_nepr_zam_one+0x1>
		Zapros_number_one[1] = '0x30'+ num_dal;
 1da:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <num_dal>
 1de:	80 5d       	subi	r24, 0xD0	; 208
 1e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Zapros_number_one+0x1>
		Zapros_save_one[1] = '0x30'+ num_dal;
 1e4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <num_dal>
 1e8:	80 5d       	subi	r24, 0xD0	; 208
 1ea:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Zapros_save_one+0x1>
 1ee:	80 c0       	rjmp	.+256    	; 0x2f0 <main+0x16c>
	}
	else
	{
		Zapros_one_zam_two[1] = '0x30' + (num_dal/10);
 1f0:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <num_dal>
 1f4:	8d ec       	ldi	r24, 0xCD	; 205
 1f6:	98 9f       	mul	r25, r24
 1f8:	81 2d       	mov	r24, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	86 95       	lsr	r24
 1fe:	86 95       	lsr	r24
 200:	86 95       	lsr	r24
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Zapros_one_zam_two+0x1>
		Zapros_one_zam_two[2] = '0x30' + (num_dal%10);
 208:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <num_dal>
 20c:	8d ec       	ldi	r24, 0xCD	; 205
 20e:	98 9f       	mul	r25, r24
 210:	81 2d       	mov	r24, r1
 212:	11 24       	eor	r1, r1
 214:	86 95       	lsr	r24
 216:	86 95       	lsr	r24
 218:	86 95       	lsr	r24
 21a:	88 0f       	add	r24, r24
 21c:	28 2f       	mov	r18, r24
 21e:	22 0f       	add	r18, r18
 220:	22 0f       	add	r18, r18
 222:	82 0f       	add	r24, r18
 224:	f9 2f       	mov	r31, r25
 226:	f8 1b       	sub	r31, r24
 228:	8f 2f       	mov	r24, r31
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Zapros_one_zam_two+0x2>
		Zapros_nepr_zam_two[1] = '0x30' + (num_dal/10);
 230:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <num_dal>
 234:	8d ec       	ldi	r24, 0xCD	; 205
 236:	98 9f       	mul	r25, r24
 238:	81 2d       	mov	r24, r1
 23a:	11 24       	eor	r1, r1
 23c:	86 95       	lsr	r24
 23e:	86 95       	lsr	r24
 240:	86 95       	lsr	r24
 242:	80 5d       	subi	r24, 0xD0	; 208
 244:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Zapros_nepr_zam_two+0x1>
		Zapros_nepr_zam_two[2] = '0x30' + (num_dal%10);
 248:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <num_dal>
 24c:	8d ec       	ldi	r24, 0xCD	; 205
 24e:	98 9f       	mul	r25, r24
 250:	81 2d       	mov	r24, r1
 252:	11 24       	eor	r1, r1
 254:	86 95       	lsr	r24
 256:	86 95       	lsr	r24
 258:	86 95       	lsr	r24
 25a:	88 0f       	add	r24, r24
 25c:	28 2f       	mov	r18, r24
 25e:	22 0f       	add	r18, r18
 260:	22 0f       	add	r18, r18
 262:	82 0f       	add	r24, r18
 264:	29 2f       	mov	r18, r25
 266:	28 1b       	sub	r18, r24
 268:	82 2f       	mov	r24, r18
 26a:	80 5d       	subi	r24, 0xD0	; 208
 26c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Zapros_nepr_zam_two+0x2>
		Zapros_number_two[1] = '0x30' + (num_dal/10);
 270:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <num_dal>
 274:	8d ec       	ldi	r24, 0xCD	; 205
 276:	98 9f       	mul	r25, r24
 278:	81 2d       	mov	r24, r1
 27a:	11 24       	eor	r1, r1
 27c:	86 95       	lsr	r24
 27e:	86 95       	lsr	r24
 280:	86 95       	lsr	r24
 282:	80 5d       	subi	r24, 0xD0	; 208
 284:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Zapros_number_two+0x1>
		Zapros_number_two[2] = '0x30' + (num_dal%10);
 288:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <num_dal>
 28c:	8d ec       	ldi	r24, 0xCD	; 205
 28e:	98 9f       	mul	r25, r24
 290:	81 2d       	mov	r24, r1
 292:	11 24       	eor	r1, r1
 294:	86 95       	lsr	r24
 296:	86 95       	lsr	r24
 298:	86 95       	lsr	r24
 29a:	88 0f       	add	r24, r24
 29c:	28 2f       	mov	r18, r24
 29e:	22 0f       	add	r18, r18
 2a0:	22 0f       	add	r18, r18
 2a2:	82 0f       	add	r24, r18
 2a4:	e9 2f       	mov	r30, r25
 2a6:	e8 1b       	sub	r30, r24
 2a8:	8e 2f       	mov	r24, r30
 2aa:	80 5d       	subi	r24, 0xD0	; 208
 2ac:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Zapros_number_two+0x2>
		Zapros_save_two[1] = '0x30' + (num_dal/10);
 2b0:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <num_dal>
 2b4:	8d ec       	ldi	r24, 0xCD	; 205
 2b6:	98 9f       	mul	r25, r24
 2b8:	81 2d       	mov	r24, r1
 2ba:	11 24       	eor	r1, r1
 2bc:	86 95       	lsr	r24
 2be:	86 95       	lsr	r24
 2c0:	86 95       	lsr	r24
 2c2:	80 5d       	subi	r24, 0xD0	; 208
 2c4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <Zapros_save_two+0x1>
		Zapros_save_two[2] = '0x30' + (num_dal%10);
 2c8:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <num_dal>
 2cc:	8d ec       	ldi	r24, 0xCD	; 205
 2ce:	98 9f       	mul	r25, r24
 2d0:	81 2d       	mov	r24, r1
 2d2:	11 24       	eor	r1, r1
 2d4:	86 95       	lsr	r24
 2d6:	86 95       	lsr	r24
 2d8:	86 95       	lsr	r24
 2da:	88 0f       	add	r24, r24
 2dc:	28 2f       	mov	r18, r24
 2de:	22 0f       	add	r18, r18
 2e0:	22 0f       	add	r18, r18
 2e2:	82 0f       	add	r24, r18
 2e4:	f9 2f       	mov	r31, r25
 2e6:	f8 1b       	sub	r31, r24
 2e8:	8f 2f       	mov	r24, r31
 2ea:	80 5d       	subi	r24, 0xD0	; 208
 2ec:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Zapros_save_two+0x2>
	}
	//Анализатор команд

	//eeprom_write_byte(&num_dal_addr, num_dal);
    sei();
 2f0:	78 94       	sei

	UBRR0H = 0;
 2f2:	85 ec       	ldi	r24, 0xC5	; 197
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	fc 01       	movw	r30, r24
 2f8:	10 82       	st	Z, r1
	UBRR0L = 103; //скорость 9600
 2fa:	84 ec       	ldi	r24, 0xC4	; 196
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	27 e6       	ldi	r18, 0x67	; 103
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
	//UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<UDRIE0); // разрешаем прием, передачу и прерывания по окончанию приема и опустошению буфера
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // разрешаем прием, передачу
 304:	81 ec       	ldi	r24, 0xC1	; 193
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	28 e1       	ldi	r18, 0x18	; 24
 30a:	fc 01       	movw	r30, r24
 30c:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); //8 бит, 1 стоп бит
 30e:	82 ec       	ldi	r24, 0xC2	; 194
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	26 e0       	ldi	r18, 0x06	; 6
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
	UBRR1H = 0;
 318:	8d ec       	ldi	r24, 0xCD	; 205
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	fc 01       	movw	r30, r24
 31e:	10 82       	st	Z, r1
	UBRR1L = 103; //скорость 9600
 320:	8c ec       	ldi	r24, 0xCC	; 204
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	27 e6       	ldi	r18, 0x67	; 103
 326:	fc 01       	movw	r30, r24
 328:	20 83       	st	Z, r18
	//UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1)|(1<<UDRIE1); // разрешаем прием, передачу и прерывания по окончанию приема и опустошению буфера
	UCSR1B = (1<<RXEN1)|(1<<TXEN1); // разрешаем прием, передачу
 32a:	89 ec       	ldi	r24, 0xC9	; 201
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	28 e1       	ldi	r18, 0x18	; 24
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10); //8 бит, 1 стоп бит
 334:	8a ec       	ldi	r24, 0xCA	; 202
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	26 e0       	ldi	r18, 0x06	; 6
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
	//_delay_ms(10);
	/*memcpy(testBuffer, 
	"\x67\x30\x73\x76\x2B\x30\x30",
	 sizeof testBuffer);*/
	//testBuffer = {0x67, 0x30, 0x73, 0x76, 0x2B, 0x30, 0x30};
	PORTB |= 1<<5;
 33e:	85 e2       	ldi	r24, 0x25	; 37
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	25 e2       	ldi	r18, 0x25	; 37
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	20 81       	ld	r18, Z
 34a:	20 62       	ori	r18, 0x20	; 32
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
	UART_ReceiveDataUSB(Otvet_Lazer_TXT, 5);
 350:	65 e0       	ldi	r22, 0x05	; 5
 352:	88 e5       	ldi	r24, 0x58	; 88
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	f0 de       	rcall	.-544    	; 0x138 <_Z19UART_ReceiveDataUSBPhh>
	while(!readyToExchangeRecUSB);
 358:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <readyToExchangeRecUSB>
 35c:	88 23       	and	r24, r24
 35e:	09 f4       	brne	.+2      	; 0x362 <main+0x1de>
 360:	fb cf       	rjmp	.-10     	; 0x358 <main+0x1d4>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	aa e7       	ldi	r26, 0x7A	; 122
 368:	b4 e4       	ldi	r27, 0x44	; 68
 36a:	89 87       	std	Y+9, r24	; 0x09
 36c:	9a 87       	std	Y+10, r25	; 0x0a
 36e:	ab 87       	std	Y+11, r26	; 0x0b
 370:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	4a e7       	ldi	r20, 0x7A	; 122
 378:	53 e4       	ldi	r21, 0x43	; 67
 37a:	69 85       	ldd	r22, Y+9	; 0x09
 37c:	7a 85       	ldd	r23, Y+10	; 0x0a
 37e:	8b 85       	ldd	r24, Y+11	; 0x0b
 380:	9c 85       	ldd	r25, Y+12	; 0x0c
 382:	9a d3       	rcall	.+1844   	; 0xab8 <__mulsf3>
 384:	dc 01       	movw	r26, r24
 386:	cb 01       	movw	r24, r22
 388:	8d 87       	std	Y+13, r24	; 0x0d
 38a:	9e 87       	std	Y+14, r25	; 0x0e
 38c:	af 87       	std	Y+15, r26	; 0x0f
 38e:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e8       	ldi	r20, 0x80	; 128
 396:	5f e3       	ldi	r21, 0x3F	; 63
 398:	6d 85       	ldd	r22, Y+13	; 0x0d
 39a:	7e 85       	ldd	r23, Y+14	; 0x0e
 39c:	8f 85       	ldd	r24, Y+15	; 0x0f
 39e:	98 89       	ldd	r25, Y+16	; 0x10
 3a0:	0a d3       	rcall	.+1556   	; 0x9b6 <__cmpsf2>
 3a2:	88 23       	and	r24, r24
 3a4:	2c f4       	brge	.+10     	; 0x3b0 <main+0x22c>
		__ticks = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	9a 8b       	std	Y+18, r25	; 0x12
 3ac:	89 8b       	std	Y+17, r24	; 0x11
 3ae:	3a c0       	rjmp	.+116    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	else if (__tmp > 65535)
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	3f ef       	ldi	r19, 0xFF	; 255
 3b4:	4f e7       	ldi	r20, 0x7F	; 127
 3b6:	57 e4       	ldi	r21, 0x47	; 71
 3b8:	6d 85       	ldd	r22, Y+13	; 0x0d
 3ba:	7e 85       	ldd	r23, Y+14	; 0x0e
 3bc:	8f 85       	ldd	r24, Y+15	; 0x0f
 3be:	98 89       	ldd	r25, Y+16	; 0x10
 3c0:	77 d3       	rcall	.+1774   	; 0xab0 <__gesf2>
 3c2:	18 16       	cp	r1, r24
 3c4:	34 f5       	brge	.+76     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	40 e2       	ldi	r20, 0x20	; 32
 3cc:	51 e4       	ldi	r21, 0x41	; 65
 3ce:	69 85       	ldd	r22, Y+9	; 0x09
 3d0:	7a 85       	ldd	r23, Y+10	; 0x0a
 3d2:	8b 85       	ldd	r24, Y+11	; 0x0b
 3d4:	9c 85       	ldd	r25, Y+12	; 0x0c
 3d6:	70 d3       	rcall	.+1760   	; 0xab8 <__mulsf3>
 3d8:	dc 01       	movw	r26, r24
 3da:	cb 01       	movw	r24, r22
 3dc:	bc 01       	movw	r22, r24
 3de:	cd 01       	movw	r24, r26
 3e0:	ee d2       	rcall	.+1500   	; 0x9be <__fixunssfsi>
 3e2:	dc 01       	movw	r26, r24
 3e4:	cb 01       	movw	r24, r22
 3e6:	9a 8b       	std	Y+18, r25	; 0x12
 3e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
 3ea:	89 89       	ldd	r24, Y+17	; 0x11
 3ec:	9a 89       	ldd	r25, Y+18	; 0x12
 3ee:	89 2b       	or	r24, r25
 3f0:	19 f1       	breq	.+70     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3f2:	89 e1       	ldi	r24, 0x19	; 25
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	9c 8b       	std	Y+20, r25	; 0x14
 3f8:	8b 8b       	std	Y+19, r24	; 0x13
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 3fa:	8b 89       	ldd	r24, Y+19	; 0x13
 3fc:	9c 89       	ldd	r25, Y+20	; 0x14
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x27a>
 402:	9c 8b       	std	Y+20, r25	; 0x14
 404:	8b 8b       	std	Y+19, r24	; 0x13
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 406:	89 89       	ldd	r24, Y+17	; 0x11
 408:	9a 89       	ldd	r25, Y+18	; 0x12
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	9a 8b       	std	Y+18, r25	; 0x12
 40e:	89 8b       	std	Y+17, r24	; 0x11
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 410:	ec cf       	rjmp	.-40     	; 0x3ea <main+0x266>
 412:	6d 85       	ldd	r22, Y+13	; 0x0d
 414:	7e 85       	ldd	r23, Y+14	; 0x0e
 416:	8f 85       	ldd	r24, Y+15	; 0x0f
 418:	98 89       	ldd	r25, Y+16	; 0x10
 41a:	d1 d2       	rcall	.+1442   	; 0x9be <__fixunssfsi>
 41c:	dc 01       	movw	r26, r24
 41e:	cb 01       	movw	r24, r22
 420:	9a 8b       	std	Y+18, r25	; 0x12
 422:	89 8b       	std	Y+17, r24	; 0x11
 424:	89 89       	ldd	r24, Y+17	; 0x11
 426:	9a 89       	ldd	r25, Y+18	; 0x12
 428:	9e 8b       	std	Y+22, r25	; 0x16
 42a:	8d 8b       	std	Y+21, r24	; 0x15
 42c:	8d 89       	ldd	r24, Y+21	; 0x15
 42e:	9e 89       	ldd	r25, Y+22	; 0x16
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	9e 8b       	std	Y+22, r25	; 0x16
 436:	8d 8b       	std	Y+21, r24	; 0x15
	_delay_ms(1000);
	PORTB &= ~ 0<<5;
 438:	85 e2       	ldi	r24, 0x25	; 37
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	25 e2       	ldi	r18, 0x25	; 37
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	f9 01       	movw	r30, r18
 442:	20 81       	ld	r18, Z
 444:	20 7e       	andi	r18, 0xE0	; 224
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	aa e7       	ldi	r26, 0x7A	; 122
 450:	b4 e4       	ldi	r27, 0x44	; 68
 452:	89 83       	std	Y+1, r24	; 0x01
 454:	9a 83       	std	Y+2, r25	; 0x02
 456:	ab 83       	std	Y+3, r26	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 458:	bc 83       	std	Y+4, r27	; 0x04
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	4a e7       	ldi	r20, 0x7A	; 122
 460:	53 e4       	ldi	r21, 0x43	; 67
 462:	69 81       	ldd	r22, Y+1	; 0x01
 464:	7a 81       	ldd	r23, Y+2	; 0x02
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	9c 81       	ldd	r25, Y+4	; 0x04
 46a:	26 d3       	rcall	.+1612   	; 0xab8 <__mulsf3>
 46c:	dc 01       	movw	r26, r24
 46e:	cb 01       	movw	r24, r22
 470:	8f 8b       	std	Y+23, r24	; 0x17
 472:	98 8f       	std	Y+24, r25	; 0x18
 474:	a9 8f       	std	Y+25, r26	; 0x19
	if (__tmp < 1.0)
 476:	ba 8f       	std	Y+26, r27	; 0x1a
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	40 e8       	ldi	r20, 0x80	; 128
 47e:	5f e3       	ldi	r21, 0x3F	; 63
 480:	6f 89       	ldd	r22, Y+23	; 0x17
 482:	78 8d       	ldd	r23, Y+24	; 0x18
 484:	89 8d       	ldd	r24, Y+25	; 0x19
 486:	9a 8d       	ldd	r25, Y+26	; 0x1a
 488:	96 d2       	rcall	.+1324   	; 0x9b6 <__cmpsf2>
 48a:	88 23       	and	r24, r24
 48c:	2c f4       	brge	.+10     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		__ticks = 1;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	9c 8f       	std	Y+28, r25	; 0x1c
 494:	8b 8f       	std	Y+27, r24	; 0x1b
	else if (__tmp > 65535)
 496:	3a c0       	rjmp	.+116    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	3f ef       	ldi	r19, 0xFF	; 255
 49c:	4f e7       	ldi	r20, 0x7F	; 127
 49e:	57 e4       	ldi	r21, 0x47	; 71
 4a0:	6f 89       	ldd	r22, Y+23	; 0x17
 4a2:	78 8d       	ldd	r23, Y+24	; 0x18
 4a4:	89 8d       	ldd	r24, Y+25	; 0x19
 4a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
 4a8:	03 d3       	rcall	.+1542   	; 0xab0 <__gesf2>
 4aa:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ac:	34 f5       	brge	.+76     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	40 e2       	ldi	r20, 0x20	; 32
 4b4:	51 e4       	ldi	r21, 0x41	; 65
 4b6:	69 81       	ldd	r22, Y+1	; 0x01
 4b8:	7a 81       	ldd	r23, Y+2	; 0x02
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	9c 81       	ldd	r25, Y+4	; 0x04
 4be:	fc d2       	rcall	.+1528   	; 0xab8 <__mulsf3>
 4c0:	dc 01       	movw	r26, r24
 4c2:	cb 01       	movw	r24, r22
 4c4:	bc 01       	movw	r22, r24
 4c6:	cd 01       	movw	r24, r26
 4c8:	7a d2       	rcall	.+1268   	; 0x9be <__fixunssfsi>
 4ca:	dc 01       	movw	r26, r24
 4cc:	cb 01       	movw	r24, r22
 4ce:	9c 8f       	std	Y+28, r25	; 0x1c
 4d0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
 4d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 4d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 4d6:	89 2b       	or	r24, r25
 4d8:	19 f1       	breq	.+70     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 4da:	89 e1       	ldi	r24, 0x19	; 25
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	9e 8f       	std	Y+30, r25	; 0x1e
 4e0:	8d 8f       	std	Y+29, r24	; 0x1d
 4e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
 4e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4ea:	9e 8f       	std	Y+30, r25	; 0x1e
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4ec:	8d 8f       	std	Y+29, r24	; 0x1d
 4ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
 4f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	9c 8f       	std	Y+28, r25	; 0x1c
 4f6:	8b 8f       	std	Y+27, r24	; 0x1b
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4f8:	ec cf       	rjmp	.-40     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4fa:	6f 89       	ldd	r22, Y+23	; 0x17
 4fc:	78 8d       	ldd	r23, Y+24	; 0x18
 4fe:	89 8d       	ldd	r24, Y+25	; 0x19
 500:	9a 8d       	ldd	r25, Y+26	; 0x1a
 502:	5d d2       	rcall	.+1210   	; 0x9be <__fixunssfsi>
 504:	dc 01       	movw	r26, r24
 506:	cb 01       	movw	r24, r22
 508:	9c 8f       	std	Y+28, r25	; 0x1c
 50a:	8b 8f       	std	Y+27, r24	; 0x1b
 50c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 50e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 510:	98 a3       	std	Y+32, r25	; 0x20
 512:	8f 8f       	std	Y+31, r24	; 0x1f
 514:	8f 8d       	ldd	r24, Y+31	; 0x1f
 516:	98 a1       	ldd	r25, Y+32	; 0x20
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 51c:	98 a3       	std	Y+32, r25	; 0x20
        //UART_ReceiveDataUSB(Otvet_Lazer_TXT, 5);
		//while(!readyToExchangeRecUSB);
// 		_delay_ms(1000);
// 		PORTB &= ~ 0<<5;
		_delay_ms(1000);
		PORTB |= 1<<5;
 51e:	8f 8f       	std	Y+31, r24	; 0x1f
 520:	85 e2       	ldi	r24, 0x25	; 37
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	25 e2       	ldi	r18, 0x25	; 37
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	f9 01       	movw	r30, r18
 52a:	20 81       	ld	r18, Z
 52c:	20 62       	ori	r18, 0x20	; 32
 52e:	fc 01       	movw	r30, r24
		UART_SendDataUSB(Otvet_Lazer_TXT, 5);
 530:	20 83       	st	Z, r18
 532:	65 e0       	ldi	r22, 0x05	; 5
 534:	88 e5       	ldi	r24, 0x58	; 88
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	d9 dd       	rcall	.-1102   	; 0xec <_Z16UART_SendDataUSBPhh>
		while(!readyToExchangeUSB);
 53a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <readyToExchangeUSB>
 53e:	88 23       	and	r24, r24
 540:	09 f4       	brne	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 542:	fb cf       	rjmp	.-10     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
		PORTB &= ~ 0<<5;
 544:	85 e2       	ldi	r24, 0x25	; 37
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	25 e2       	ldi	r18, 0x25	; 37
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	20 7e       	andi	r18, 0xE0	; 224
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	aa e7       	ldi	r26, 0x7A	; 122
 55c:	b4 e4       	ldi	r27, 0x44	; 68
 55e:	8d 83       	std	Y+5, r24	; 0x05
 560:	9e 83       	std	Y+6, r25	; 0x06
 562:	af 83       	std	Y+7, r26	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 564:	b8 87       	std	Y+8, r27	; 0x08
 566:	20 e0       	ldi	r18, 0x00	; 0
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	4a e7       	ldi	r20, 0x7A	; 122
 56c:	53 e4       	ldi	r21, 0x43	; 67
 56e:	6d 81       	ldd	r22, Y+5	; 0x05
 570:	7e 81       	ldd	r23, Y+6	; 0x06
 572:	8f 81       	ldd	r24, Y+7	; 0x07
 574:	98 85       	ldd	r25, Y+8	; 0x08
 576:	a0 d2       	rcall	.+1344   	; 0xab8 <__mulsf3>
 578:	dc 01       	movw	r26, r24
 57a:	cb 01       	movw	r24, r22
 57c:	89 a3       	std	Y+33, r24	; 0x21
 57e:	9a a3       	std	Y+34, r25	; 0x22
 580:	ab a3       	std	Y+35, r26	; 0x23
	if (__tmp < 1.0)
 582:	bc a3       	std	Y+36, r27	; 0x24
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	40 e8       	ldi	r20, 0x80	; 128
 58a:	5f e3       	ldi	r21, 0x3F	; 63
 58c:	69 a1       	ldd	r22, Y+33	; 0x21
 58e:	7a a1       	ldd	r23, Y+34	; 0x22
 590:	8b a1       	ldd	r24, Y+35	; 0x23
 592:	9c a1       	ldd	r25, Y+36	; 0x24
 594:	10 d2       	rcall	.+1056   	; 0x9b6 <__cmpsf2>
 596:	88 23       	and	r24, r24
		__ticks = 1;
 598:	2c f4       	brge	.+10     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	9e a3       	std	Y+38, r25	; 0x26
 5a0:	8d a3       	std	Y+37, r24	; 0x25
	else if (__tmp > 65535)
 5a2:	3b c0       	rjmp	.+118    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	3f ef       	ldi	r19, 0xFF	; 255
 5a8:	4f e7       	ldi	r20, 0x7F	; 127
 5aa:	57 e4       	ldi	r21, 0x47	; 71
 5ac:	69 a1       	ldd	r22, Y+33	; 0x21
 5ae:	7a a1       	ldd	r23, Y+34	; 0x22
 5b0:	8b a1       	ldd	r24, Y+35	; 0x23
 5b2:	9c a1       	ldd	r25, Y+36	; 0x24
 5b4:	7d d2       	rcall	.+1274   	; 0xab0 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5b6:	18 16       	cp	r1, r24
 5b8:	3c f5       	brge	.+78     	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e2       	ldi	r20, 0x20	; 32
 5c0:	51 e4       	ldi	r21, 0x41	; 65
 5c2:	6d 81       	ldd	r22, Y+5	; 0x05
 5c4:	7e 81       	ldd	r23, Y+6	; 0x06
 5c6:	8f 81       	ldd	r24, Y+7	; 0x07
 5c8:	98 85       	ldd	r25, Y+8	; 0x08
 5ca:	76 d2       	rcall	.+1260   	; 0xab8 <__mulsf3>
 5cc:	dc 01       	movw	r26, r24
 5ce:	cb 01       	movw	r24, r22
 5d0:	bc 01       	movw	r22, r24
 5d2:	cd 01       	movw	r24, r26
 5d4:	f4 d1       	rcall	.+1000   	; 0x9be <__fixunssfsi>
 5d6:	dc 01       	movw	r26, r24
 5d8:	cb 01       	movw	r24, r22
 5da:	9e a3       	std	Y+38, r25	; 0x26
 5dc:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
 5de:	8d a1       	ldd	r24, Y+37	; 0x25
 5e0:	9e a1       	ldd	r25, Y+38	; 0x26
 5e2:	89 2b       	or	r24, r25
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 5e6:	31 cf       	rjmp	.-414    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 5e8:	89 e1       	ldi	r24, 0x19	; 25
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	98 a7       	std	Y+40, r25	; 0x28
 5ee:	8f a3       	std	Y+39, r24	; 0x27
 5f0:	8f a1       	ldd	r24, Y+39	; 0x27
 5f2:	98 a5       	ldd	r25, Y+40	; 0x28
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
 5f8:	98 a7       	std	Y+40, r25	; 0x28
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5fa:	8f a3       	std	Y+39, r24	; 0x27
 5fc:	8d a1       	ldd	r24, Y+37	; 0x25
 5fe:	9e a1       	ldd	r25, Y+38	; 0x26
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	9e a3       	std	Y+38, r25	; 0x26
 604:	8d a3       	std	Y+37, r24	; 0x25
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 606:	eb cf       	rjmp	.-42     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 608:	69 a1       	ldd	r22, Y+33	; 0x21
 60a:	7a a1       	ldd	r23, Y+34	; 0x22
 60c:	8b a1       	ldd	r24, Y+35	; 0x23
 60e:	9c a1       	ldd	r25, Y+36	; 0x24
 610:	d6 d1       	rcall	.+940    	; 0x9be <__fixunssfsi>
 612:	dc 01       	movw	r26, r24
 614:	cb 01       	movw	r24, r22
 616:	9e a3       	std	Y+38, r25	; 0x26
 618:	8d a3       	std	Y+37, r24	; 0x25
 61a:	8d a1       	ldd	r24, Y+37	; 0x25
 61c:	9e a1       	ldd	r25, Y+38	; 0x26
 61e:	9a a7       	std	Y+42, r25	; 0x2a
 620:	89 a7       	std	Y+41, r24	; 0x29
 622:	89 a5       	ldd	r24, Y+41	; 0x29
 624:	9a a5       	ldd	r25, Y+42	; 0x2a
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
 62a:	9a a7       	std	Y+42, r25	; 0x2a
 62c:	89 a7       	std	Y+41, r24	; 0x29
	PORTB |= 1<<5;
	UART_ReceiveDataUSB(Otvet_Lazer_TXT, 5);
	while(!readyToExchangeRecUSB);
	_delay_ms(1000);
	PORTB &= ~ 0<<5;
    while(1)
 62e:	0d cf       	rjmp	.-486    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>

00000630 <__vector_29>:
		_delay_ms(1000);
    }
}
/***************************************************************************************/
ISR(USART1_UDRE_vect)
{
 630:	1f 92       	push	r1
 632:	0f 92       	push	r0
 634:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 638:	0f 92       	push	r0
 63a:	11 24       	eor	r1, r1
 63c:	2f 93       	push	r18
 63e:	3f 93       	push	r19
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
    UDR1 = *sendDataPtr;
 650:	8e ec       	ldi	r24, 0xCE	; 206
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <sendDataPtr>
 658:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <sendDataPtr+0x1>
 65c:	f9 01       	movw	r30, r18
 65e:	20 81       	ld	r18, Z
 660:	fc 01       	movw	r30, r24
 662:	20 83       	st	Z, r18
    sendDataPtr++;
 664:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <sendDataPtr>
 668:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <sendDataPtr+0x1>
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <sendDataPtr+0x1>
 672:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <sendDataPtr>
    numOfDataSended++;
 676:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <numOfDataSended>
 67a:	8f 5f       	subi	r24, 0xFF	; 255
 67c:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <numOfDataSended>
    
    if (numOfDataSended == numOfDataToSend)
 680:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <numOfDataSended>
 684:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <numOfDataToSend>
 688:	98 17       	cp	r25, r24
 68a:	61 f4       	brne	.+24     	; 0x6a4 <__vector_29+0x74>
    {
        UCSR1B &= ~(1 << UDRIE1);
 68c:	89 ec       	ldi	r24, 0xC9	; 201
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	29 ec       	ldi	r18, 0xC9	; 201
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	f9 01       	movw	r30, r18
 696:	20 81       	ld	r18, Z
 698:	2f 7d       	andi	r18, 0xDF	; 223
 69a:	fc 01       	movw	r30, r24
 69c:	20 83       	st	Z, r18
        readyToExchange = 1;
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <readyToExchange>
    }
}
 6a4:	00 00       	nop
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <__vector_19>:
/***************************************************************************************/
ISR(USART0_UDRE_vect)
{
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 6ca:	0f 92       	push	r0
 6cc:	11 24       	eor	r1, r1
 6ce:	2f 93       	push	r18
 6d0:	3f 93       	push	r19
 6d2:	8f 93       	push	r24
 6d4:	9f 93       	push	r25
 6d6:	ef 93       	push	r30
 6d8:	ff 93       	push	r31
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
	UDR0 = *sendDataPtrUSB;
 6e2:	86 ec       	ldi	r24, 0xC6	; 198
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <sendDataPtrUSB>
 6ea:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <sendDataPtrUSB+0x1>
 6ee:	f9 01       	movw	r30, r18
 6f0:	20 81       	ld	r18, Z
 6f2:	fc 01       	movw	r30, r24
 6f4:	20 83       	st	Z, r18
	sendDataPtrUSB++;
 6f6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <sendDataPtrUSB>
 6fa:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <sendDataPtrUSB+0x1>
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <sendDataPtrUSB+0x1>
 704:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <sendDataPtrUSB>
	numOfDataSendedUSB++;
 708:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <numOfDataSendedUSB>
 70c:	8f 5f       	subi	r24, 0xFF	; 255
 70e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <numOfDataSendedUSB>
	
	if (numOfDataSendedUSB == numOfDataToSendUSB)
 712:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <numOfDataSendedUSB>
 716:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <numOfDataToSendUSB>
 71a:	98 17       	cp	r25, r24
 71c:	61 f4       	brne	.+24     	; 0x736 <__vector_19+0x74>
	{
		UCSR0B &= ~(1 << UDRIE0);
 71e:	81 ec       	ldi	r24, 0xC1	; 193
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	21 ec       	ldi	r18, 0xC1	; 193
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	f9 01       	movw	r30, r18
 728:	20 81       	ld	r18, Z
 72a:	2f 7d       	andi	r18, 0xDF	; 223
 72c:	fc 01       	movw	r30, r24
 72e:	20 83       	st	Z, r18
		readyToExchangeUSB = 1;
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <readyToExchangeUSB>
	}
}
 736:	00 00       	nop
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	3f 91       	pop	r19
 746:	2f 91       	pop	r18
 748:	0f 90       	pop	r0
 74a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 74e:	0f 90       	pop	r0
 750:	1f 90       	pop	r1
 752:	18 95       	reti

00000754 <__vector_28>:
/***************************************************************************************/
ISR(USART1_RX_vect)
{
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	ef 93       	push	r30
 76e:	ff 93       	push	r31
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	00 d0       	rcall	.+0      	; 0x776 <__vector_28+0x22>
 776:	00 d0       	rcall	.+0      	; 0x778 <__vector_28+0x24>
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
		UCSR1B &= ~((1 << RXCIE1) | (1 << RXEN1));
		readyToExchangeRec = 1;
	}*/


    Otvet_Lazer[0] = Otvet_Lazer[1];
 77c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__data_end+0x1>
 780:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
    Otvet_Lazer[1] = Otvet_Lazer[2];
 784:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end+0x2>
 788:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__data_end+0x1>
    Otvet_Lazer[2] = Otvet_Lazer[3];
 78c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__data_end+0x3>
 790:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end+0x2>
    Otvet_Lazer[3] = Otvet_Lazer[4];
 794:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end+0x4>
 798:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__data_end+0x3>
    Otvet_Lazer[4] = Otvet_Lazer[5];
 79c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__data_end+0x5>
 7a0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end+0x4>
    Otvet_Lazer[5] = Otvet_Lazer[6];
 7a4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end+0x6>
 7a8:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <__data_end+0x5>
    Otvet_Lazer[6] = Otvet_Lazer[7];
 7ac:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <__data_end+0x7>
 7b0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end+0x6>
    Otvet_Lazer[7] = Otvet_Lazer[8];
 7b4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end+0x8>
 7b8:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__data_end+0x7>
    Otvet_Lazer[8] = Otvet_Lazer[9];
 7bc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <__data_end+0x9>
 7c0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end+0x8>
    Otvet_Lazer[9] = Otvet_Lazer[10];
 7c4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end+0xa>
 7c8:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <__data_end+0x9>
    Otvet_Lazer[10] = Otvet_Lazer[11];
 7cc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <__data_end+0xb>
 7d0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end+0xa>
    Otvet_Lazer[11] = UDR1;
 7d4:	8e ec       	ldi	r24, 0xCE	; 206
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	fc 01       	movw	r30, r24
 7da:	80 81       	ld	r24, Z
 7dc:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <__data_end+0xb>

	//UART_SendDataUSB(Otvet_Lazer, 12);
    //*receivedDataPtr = UDR1;

	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E)) 
 7e0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 7e4:	80 38       	cpi	r24, 0x80	; 128
 7e6:	09 f0       	breq	.+2      	; 0x7ea <__vector_28+0x96>
 7e8:	88 c0       	rjmp	.+272    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 7ea:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__data_end+0x1>
 7ee:	86 30       	cpi	r24, 0x06	; 6
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <__vector_28+0xa0>
 7f2:	83 c0       	rjmp	.+262    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 7f4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end+0x2>
 7f8:	83 38       	cpi	r24, 0x83	; 131
 7fa:	09 f0       	breq	.+2      	; 0x7fe <__vector_28+0xaa>
 7fc:	7e c0       	rjmp	.+252    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 7fe:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__data_end+0x3>
 802:	80 33       	cpi	r24, 0x30	; 48
 804:	09 f0       	breq	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 806:	79 c0       	rjmp	.+242    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 808:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end+0x6>
 80c:	8e 32       	cpi	r24, 0x2E	; 46
 80e:	09 f0       	breq	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 810:	74 c0       	rjmp	.+232    	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
 812:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 816:	28 2f       	mov	r18, r24
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__data_end+0x1>
 81e:	88 2f       	mov	r24, r24
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	28 0f       	add	r18, r24
 824:	39 1f       	adc	r19, r25
 826:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end+0x2>
 82a:	88 2f       	mov	r24, r24
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	28 0f       	add	r18, r24
 830:	39 1f       	adc	r19, r25
 832:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__data_end+0x3>
 836:	88 2f       	mov	r24, r24
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	82 0f       	add	r24, r18
 83c:	93 1f       	adc	r25, r19
 83e:	9a 83       	std	Y+2, r25	; 0x02
 840:	89 83       	std	Y+1, r24	; 0x01
		Error_j = 0;
 842:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <Error_j>
		for (int i=0; i <= 6; i++) 
 846:	1c 82       	std	Y+4, r1	; 0x04
 848:	1b 82       	std	Y+3, r1	; 0x03
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	9c 81       	ldd	r25, Y+4	; 0x04
 84e:	07 97       	sbiw	r24, 0x07	; 7
 850:	8c f5       	brge	.+98     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
		{
			j = Otvet_Lazer[i+4];
 852:	8b 81       	ldd	r24, Y+3	; 0x03
 854:	9c 81       	ldd	r25, Y+4	; 0x04
 856:	04 96       	adiw	r24, 0x04	; 4
 858:	84 5b       	subi	r24, 0xB4	; 180
 85a:	9e 4f       	sbci	r25, 0xFE	; 254
 85c:	fc 01       	movw	r30, r24
 85e:	80 81       	ld	r24, Z
 860:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <j>
			CS=CS+j;
 864:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <j>
 868:	88 2f       	mov	r24, r24
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	29 81       	ldd	r18, Y+1	; 0x01
 86e:	3a 81       	ldd	r19, Y+2	; 0x02
 870:	82 0f       	add	r24, r18
 872:	93 1f       	adc	r25, r19
 874:	9a 83       	std	Y+2, r25	; 0x02
 876:	89 83       	std	Y+1, r24	; 0x01
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
 878:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <j>
 87c:	80 33       	cpi	r24, 0x30	; 48
 87e:	20 f0       	brcs	.+8      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 880:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <j>
 884:	8b 33       	cpi	r24, 0x3B	; 59
 886:	20 f0       	brcs	.+8      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 888:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <j>
 88c:	8e 32       	cpi	r24, 0x2E	; 46
 88e:	49 f4       	brne	.+18     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 890:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <j>
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	9c 81       	ldd	r25, Y+4	; 0x04
 898:	88 5a       	subi	r24, 0xA8	; 168
 89a:	9e 4f       	sbci	r25, 0xFE	; 254
 89c:	fc 01       	movw	r30, r24
 89e:	20 83       	st	Z, r18
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
			else Error_j=1;
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <Error_j>

	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E)) 
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		Error_j = 0;
		for (int i=0; i <= 6; i++) 
 8a8:	8b 81       	ldd	r24, Y+3	; 0x03
 8aa:	9c 81       	ldd	r25, Y+4	; 0x04
 8ac:	01 96       	adiw	r24, 0x01	; 1
 8ae:	9c 83       	std	Y+4, r25	; 0x04
 8b0:	8b 83       	std	Y+3, r24	; 0x03
 8b2:	cb cf       	rjmp	.-106    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
			j = Otvet_Lazer[i+4];
			CS=CS+j;
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			else Error_j=1;
		}
		if ((Error_j == 0) && (256 - CS % 256 == Otvet_Lazer[11])) 
 8b4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <Error_j>
 8b8:	88 23       	and	r24, r24
 8ba:	f9 f4       	brne	.+62     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8bc:	89 81       	ldd	r24, Y+1	; 0x01
 8be:	9a 81       	ldd	r25, Y+2	; 0x02
 8c0:	90 78       	andi	r25, 0x80	; 128
 8c2:	99 23       	and	r25, r25
 8c4:	1c f4       	brge	.+6      	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8c6:	01 97       	sbiw	r24, 0x01	; 1
 8c8:	9f 6f       	ori	r25, 0xFF	; 255
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	9c 01       	movw	r18, r24
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	ac 01       	movw	r20, r24
 8d4:	42 1b       	sub	r20, r18
 8d6:	53 0b       	sbc	r21, r19
 8d8:	9a 01       	movw	r18, r20
 8da:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <__data_end+0xb>
 8de:	88 2f       	mov	r24, r24
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	28 17       	cp	r18, r24
 8e4:	39 07       	cpc	r19, r25
 8e6:	49 f4       	brne	.+18     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		{
			Otvet_Lazer_TXT[7] = 0x0D;              //Ставим символ переноса в конце строки
 8e8:	8d e0       	ldi	r24, 0x0D	; 13
 8ea:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <Otvet_Lazer_TXT+0x7>
			Otvet_Lazer_TXT[2] = 0x2C;              //Ставим запятую вместо точки в число на выдачу
 8ee:	8c e2       	ldi	r24, 0x2C	; 44
 8f0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Otvet_Lazer_TXT+0x2>
			//UART_SendDataUSB(Otvet_Lazer_TXT, 8);
			//while(!readyToExchangeUSB);
			//_delay_ms(150);
			readyToExchangeRec = 1;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <readyToExchangeRec>
    /*if (numOfDataReceived == numOfDataToReceive)
    {
        UCSR1B &= ~((1 << RXCIE1) | (1 << RXEN1));
        readyToExchangeUSB = 1;
    }*/
}
 8fa:	00 00       	nop
 8fc:	0f 90       	pop	r0
 8fe:	0f 90       	pop	r0
 900:	0f 90       	pop	r0
 902:	0f 90       	pop	r0
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	ff 91       	pop	r31
 90a:	ef 91       	pop	r30
 90c:	9f 91       	pop	r25
 90e:	8f 91       	pop	r24
 910:	5f 91       	pop	r21
 912:	4f 91       	pop	r20
 914:	3f 91       	pop	r19
 916:	2f 91       	pop	r18
 918:	0f 90       	pop	r0
 91a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <__vector_18>:
/***************************************************************************************/
ISR(USART0_RX_vect)
{
 924:	1f 92       	push	r1
 926:	0f 92       	push	r0
 928:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 92c:	0f 92       	push	r0
 92e:	11 24       	eor	r1, r1
 930:	2f 93       	push	r18
 932:	3f 93       	push	r19
 934:	8f 93       	push	r24
 936:	9f 93       	push	r25
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
//     Otvet_Lazer_TXT[4] = Otvet_Lazer_TXT[5];
//     Otvet_Lazer_TXT[5] = Otvet_Lazer_TXT[6];
//     Otvet_Lazer_TXT[6] = Otvet_Lazer_TXT[7];
//     Otvet_Lazer_TXT[7] = UDR1;

	*receivedDataPtrUSB = UDR0;
 944:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <receivedDataPtrUSB>
 948:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <receivedDataPtrUSB+0x1>
 94c:	26 ec       	ldi	r18, 0xC6	; 198
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	f9 01       	movw	r30, r18
 952:	20 81       	ld	r18, Z
 954:	fc 01       	movw	r30, r24
 956:	20 83       	st	Z, r18
	receivedDataPtrUSB++;
 958:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <receivedDataPtrUSB>
 95c:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <receivedDataPtrUSB+0x1>
 960:	01 96       	adiw	r24, 0x01	; 1
 962:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <receivedDataPtrUSB+0x1>
 966:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <receivedDataPtrUSB>
	numOfDataReceivedUSB++;
 96a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <numOfDataReceivedUSB>
 96e:	8f 5f       	subi	r24, 0xFF	; 255
 970:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <numOfDataReceivedUSB>
	


    if (numOfDataReceivedUSB == numOfDataToReceiveUSB)
 974:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <numOfDataReceivedUSB>
 978:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <numOfDataToReceiveUSB>
 97c:	98 17       	cp	r25, r24
 97e:	61 f4       	brne	.+24     	; 0x998 <__vector_18+0x74>
    {
        UCSR0B &= ~((1 << RXCIE0) | (1 << RXEN0));
 980:	81 ec       	ldi	r24, 0xC1	; 193
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	21 ec       	ldi	r18, 0xC1	; 193
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	f9 01       	movw	r30, r18
 98a:	20 81       	ld	r18, Z
 98c:	2f 76       	andi	r18, 0x6F	; 111
 98e:	fc 01       	movw	r30, r24
 990:	20 83       	st	Z, r18
        readyToExchangeRecUSB = 1;
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <readyToExchangeRecUSB>
    }
 998:	00 00       	nop
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	ff 91       	pop	r31
 9a0:	ef 91       	pop	r30
 9a2:	9f 91       	pop	r25
 9a4:	8f 91       	pop	r24
 9a6:	3f 91       	pop	r19
 9a8:	2f 91       	pop	r18
 9aa:	0f 90       	pop	r0
 9ac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <__cmpsf2>:
 9b6:	2f d0       	rcall	.+94     	; 0xa16 <__fp_cmp>
 9b8:	08 f4       	brcc	.+2      	; 0x9bc <__cmpsf2+0x6>
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	08 95       	ret

000009be <__fixunssfsi>:
 9be:	57 d0       	rcall	.+174    	; 0xa6e <__fp_splitA>
 9c0:	88 f0       	brcs	.+34     	; 0x9e4 <__fixunssfsi+0x26>
 9c2:	9f 57       	subi	r25, 0x7F	; 127
 9c4:	90 f0       	brcs	.+36     	; 0x9ea <__fixunssfsi+0x2c>
 9c6:	b9 2f       	mov	r27, r25
 9c8:	99 27       	eor	r25, r25
 9ca:	b7 51       	subi	r27, 0x17	; 23
 9cc:	a0 f0       	brcs	.+40     	; 0x9f6 <__fixunssfsi+0x38>
 9ce:	d1 f0       	breq	.+52     	; 0xa04 <__fixunssfsi+0x46>
 9d0:	66 0f       	add	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	1a f0       	brmi	.+6      	; 0x9e0 <__fixunssfsi+0x22>
 9da:	ba 95       	dec	r27
 9dc:	c9 f7       	brne	.-14     	; 0x9d0 <__fixunssfsi+0x12>
 9de:	12 c0       	rjmp	.+36     	; 0xa04 <__fixunssfsi+0x46>
 9e0:	b1 30       	cpi	r27, 0x01	; 1
 9e2:	81 f0       	breq	.+32     	; 0xa04 <__fixunssfsi+0x46>
 9e4:	5e d0       	rcall	.+188    	; 0xaa2 <__fp_zero>
 9e6:	b1 e0       	ldi	r27, 0x01	; 1
 9e8:	08 95       	ret
 9ea:	5b c0       	rjmp	.+182    	; 0xaa2 <__fp_zero>
 9ec:	67 2f       	mov	r22, r23
 9ee:	78 2f       	mov	r23, r24
 9f0:	88 27       	eor	r24, r24
 9f2:	b8 5f       	subi	r27, 0xF8	; 248
 9f4:	39 f0       	breq	.+14     	; 0xa04 <__fixunssfsi+0x46>
 9f6:	b9 3f       	cpi	r27, 0xF9	; 249
 9f8:	cc f3       	brlt	.-14     	; 0x9ec <__fixunssfsi+0x2e>
 9fa:	86 95       	lsr	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b3 95       	inc	r27
 a02:	d9 f7       	brne	.-10     	; 0x9fa <__fixunssfsi+0x3c>
 a04:	3e f4       	brtc	.+14     	; 0xa14 <__fixunssfsi+0x56>
 a06:	90 95       	com	r25
 a08:	80 95       	com	r24
 a0a:	70 95       	com	r23
 a0c:	61 95       	neg	r22
 a0e:	7f 4f       	sbci	r23, 0xFF	; 255
 a10:	8f 4f       	sbci	r24, 0xFF	; 255
 a12:	9f 4f       	sbci	r25, 0xFF	; 255
 a14:	08 95       	ret

00000a16 <__fp_cmp>:
 a16:	99 0f       	add	r25, r25
 a18:	00 08       	sbc	r0, r0
 a1a:	55 0f       	add	r21, r21
 a1c:	aa 0b       	sbc	r26, r26
 a1e:	e0 e8       	ldi	r30, 0x80	; 128
 a20:	fe ef       	ldi	r31, 0xFE	; 254
 a22:	16 16       	cp	r1, r22
 a24:	17 06       	cpc	r1, r23
 a26:	e8 07       	cpc	r30, r24
 a28:	f9 07       	cpc	r31, r25
 a2a:	c0 f0       	brcs	.+48     	; 0xa5c <__fp_cmp+0x46>
 a2c:	12 16       	cp	r1, r18
 a2e:	13 06       	cpc	r1, r19
 a30:	e4 07       	cpc	r30, r20
 a32:	f5 07       	cpc	r31, r21
 a34:	98 f0       	brcs	.+38     	; 0xa5c <__fp_cmp+0x46>
 a36:	62 1b       	sub	r22, r18
 a38:	73 0b       	sbc	r23, r19
 a3a:	84 0b       	sbc	r24, r20
 a3c:	95 0b       	sbc	r25, r21
 a3e:	39 f4       	brne	.+14     	; 0xa4e <__fp_cmp+0x38>
 a40:	0a 26       	eor	r0, r26
 a42:	61 f0       	breq	.+24     	; 0xa5c <__fp_cmp+0x46>
 a44:	23 2b       	or	r18, r19
 a46:	24 2b       	or	r18, r20
 a48:	25 2b       	or	r18, r21
 a4a:	21 f4       	brne	.+8      	; 0xa54 <__fp_cmp+0x3e>
 a4c:	08 95       	ret
 a4e:	0a 26       	eor	r0, r26
 a50:	09 f4       	brne	.+2      	; 0xa54 <__fp_cmp+0x3e>
 a52:	a1 40       	sbci	r26, 0x01	; 1
 a54:	a6 95       	lsr	r26
 a56:	8f ef       	ldi	r24, 0xFF	; 255
 a58:	81 1d       	adc	r24, r1
 a5a:	81 1d       	adc	r24, r1
 a5c:	08 95       	ret

00000a5e <__fp_split3>:
 a5e:	57 fd       	sbrc	r21, 7
 a60:	90 58       	subi	r25, 0x80	; 128
 a62:	44 0f       	add	r20, r20
 a64:	55 1f       	adc	r21, r21
 a66:	59 f0       	breq	.+22     	; 0xa7e <__fp_splitA+0x10>
 a68:	5f 3f       	cpi	r21, 0xFF	; 255
 a6a:	71 f0       	breq	.+28     	; 0xa88 <__fp_splitA+0x1a>
 a6c:	47 95       	ror	r20

00000a6e <__fp_splitA>:
 a6e:	88 0f       	add	r24, r24
 a70:	97 fb       	bst	r25, 7
 a72:	99 1f       	adc	r25, r25
 a74:	61 f0       	breq	.+24     	; 0xa8e <__fp_splitA+0x20>
 a76:	9f 3f       	cpi	r25, 0xFF	; 255
 a78:	79 f0       	breq	.+30     	; 0xa98 <__fp_splitA+0x2a>
 a7a:	87 95       	ror	r24
 a7c:	08 95       	ret
 a7e:	12 16       	cp	r1, r18
 a80:	13 06       	cpc	r1, r19
 a82:	14 06       	cpc	r1, r20
 a84:	55 1f       	adc	r21, r21
 a86:	f2 cf       	rjmp	.-28     	; 0xa6c <__fp_split3+0xe>
 a88:	46 95       	lsr	r20
 a8a:	f1 df       	rcall	.-30     	; 0xa6e <__fp_splitA>
 a8c:	08 c0       	rjmp	.+16     	; 0xa9e <__fp_splitA+0x30>
 a8e:	16 16       	cp	r1, r22
 a90:	17 06       	cpc	r1, r23
 a92:	18 06       	cpc	r1, r24
 a94:	99 1f       	adc	r25, r25
 a96:	f1 cf       	rjmp	.-30     	; 0xa7a <__fp_splitA+0xc>
 a98:	86 95       	lsr	r24
 a9a:	71 05       	cpc	r23, r1
 a9c:	61 05       	cpc	r22, r1
 a9e:	08 94       	sec
 aa0:	08 95       	ret

00000aa2 <__fp_zero>:
 aa2:	e8 94       	clt

00000aa4 <__fp_szero>:
 aa4:	bb 27       	eor	r27, r27
 aa6:	66 27       	eor	r22, r22
 aa8:	77 27       	eor	r23, r23
 aaa:	cb 01       	movw	r24, r22
 aac:	97 f9       	bld	r25, 7
 aae:	08 95       	ret

00000ab0 <__gesf2>:
 ab0:	b2 df       	rcall	.-156    	; 0xa16 <__fp_cmp>
 ab2:	08 f4       	brcc	.+2      	; 0xab6 <__gesf2+0x6>
 ab4:	8f ef       	ldi	r24, 0xFF	; 255
 ab6:	08 95       	ret

00000ab8 <__mulsf3>:
 ab8:	0b d0       	rcall	.+22     	; 0xad0 <__mulsf3x>
 aba:	78 c0       	rjmp	.+240    	; 0xbac <__fp_round>
 abc:	69 d0       	rcall	.+210    	; 0xb90 <__fp_pscA>
 abe:	28 f0       	brcs	.+10     	; 0xaca <__mulsf3+0x12>
 ac0:	6e d0       	rcall	.+220    	; 0xb9e <__fp_pscB>
 ac2:	18 f0       	brcs	.+6      	; 0xaca <__mulsf3+0x12>
 ac4:	95 23       	and	r25, r21
 ac6:	09 f0       	breq	.+2      	; 0xaca <__mulsf3+0x12>
 ac8:	5a c0       	rjmp	.+180    	; 0xb7e <__fp_inf>
 aca:	5f c0       	rjmp	.+190    	; 0xb8a <__fp_nan>
 acc:	11 24       	eor	r1, r1
 ace:	ea cf       	rjmp	.-44     	; 0xaa4 <__fp_szero>

00000ad0 <__mulsf3x>:
 ad0:	c6 df       	rcall	.-116    	; 0xa5e <__fp_split3>
 ad2:	a0 f3       	brcs	.-24     	; 0xabc <__mulsf3+0x4>

00000ad4 <__mulsf3_pse>:
 ad4:	95 9f       	mul	r25, r21
 ad6:	d1 f3       	breq	.-12     	; 0xacc <__mulsf3+0x14>
 ad8:	95 0f       	add	r25, r21
 ada:	50 e0       	ldi	r21, 0x00	; 0
 adc:	55 1f       	adc	r21, r21
 ade:	62 9f       	mul	r22, r18
 ae0:	f0 01       	movw	r30, r0
 ae2:	72 9f       	mul	r23, r18
 ae4:	bb 27       	eor	r27, r27
 ae6:	f0 0d       	add	r31, r0
 ae8:	b1 1d       	adc	r27, r1
 aea:	63 9f       	mul	r22, r19
 aec:	aa 27       	eor	r26, r26
 aee:	f0 0d       	add	r31, r0
 af0:	b1 1d       	adc	r27, r1
 af2:	aa 1f       	adc	r26, r26
 af4:	64 9f       	mul	r22, r20
 af6:	66 27       	eor	r22, r22
 af8:	b0 0d       	add	r27, r0
 afa:	a1 1d       	adc	r26, r1
 afc:	66 1f       	adc	r22, r22
 afe:	82 9f       	mul	r24, r18
 b00:	22 27       	eor	r18, r18
 b02:	b0 0d       	add	r27, r0
 b04:	a1 1d       	adc	r26, r1
 b06:	62 1f       	adc	r22, r18
 b08:	73 9f       	mul	r23, r19
 b0a:	b0 0d       	add	r27, r0
 b0c:	a1 1d       	adc	r26, r1
 b0e:	62 1f       	adc	r22, r18
 b10:	83 9f       	mul	r24, r19
 b12:	a0 0d       	add	r26, r0
 b14:	61 1d       	adc	r22, r1
 b16:	22 1f       	adc	r18, r18
 b18:	74 9f       	mul	r23, r20
 b1a:	33 27       	eor	r19, r19
 b1c:	a0 0d       	add	r26, r0
 b1e:	61 1d       	adc	r22, r1
 b20:	23 1f       	adc	r18, r19
 b22:	84 9f       	mul	r24, r20
 b24:	60 0d       	add	r22, r0
 b26:	21 1d       	adc	r18, r1
 b28:	82 2f       	mov	r24, r18
 b2a:	76 2f       	mov	r23, r22
 b2c:	6a 2f       	mov	r22, r26
 b2e:	11 24       	eor	r1, r1
 b30:	9f 57       	subi	r25, 0x7F	; 127
 b32:	50 40       	sbci	r21, 0x00	; 0
 b34:	8a f0       	brmi	.+34     	; 0xb58 <__mulsf3_pse+0x84>
 b36:	e1 f0       	breq	.+56     	; 0xb70 <__mulsf3_pse+0x9c>
 b38:	88 23       	and	r24, r24
 b3a:	4a f0       	brmi	.+18     	; 0xb4e <__mulsf3_pse+0x7a>
 b3c:	ee 0f       	add	r30, r30
 b3e:	ff 1f       	adc	r31, r31
 b40:	bb 1f       	adc	r27, r27
 b42:	66 1f       	adc	r22, r22
 b44:	77 1f       	adc	r23, r23
 b46:	88 1f       	adc	r24, r24
 b48:	91 50       	subi	r25, 0x01	; 1
 b4a:	50 40       	sbci	r21, 0x00	; 0
 b4c:	a9 f7       	brne	.-22     	; 0xb38 <__mulsf3_pse+0x64>
 b4e:	9e 3f       	cpi	r25, 0xFE	; 254
 b50:	51 05       	cpc	r21, r1
 b52:	70 f0       	brcs	.+28     	; 0xb70 <__mulsf3_pse+0x9c>
 b54:	14 c0       	rjmp	.+40     	; 0xb7e <__fp_inf>
 b56:	a6 cf       	rjmp	.-180    	; 0xaa4 <__fp_szero>
 b58:	5f 3f       	cpi	r21, 0xFF	; 255
 b5a:	ec f3       	brlt	.-6      	; 0xb56 <__mulsf3_pse+0x82>
 b5c:	98 3e       	cpi	r25, 0xE8	; 232
 b5e:	dc f3       	brlt	.-10     	; 0xb56 <__mulsf3_pse+0x82>
 b60:	86 95       	lsr	r24
 b62:	77 95       	ror	r23
 b64:	67 95       	ror	r22
 b66:	b7 95       	ror	r27
 b68:	f7 95       	ror	r31
 b6a:	e7 95       	ror	r30
 b6c:	9f 5f       	subi	r25, 0xFF	; 255
 b6e:	c1 f7       	brne	.-16     	; 0xb60 <__mulsf3_pse+0x8c>
 b70:	fe 2b       	or	r31, r30
 b72:	88 0f       	add	r24, r24
 b74:	91 1d       	adc	r25, r1
 b76:	96 95       	lsr	r25
 b78:	87 95       	ror	r24
 b7a:	97 f9       	bld	r25, 7
 b7c:	08 95       	ret

00000b7e <__fp_inf>:
 b7e:	97 f9       	bld	r25, 7
 b80:	9f 67       	ori	r25, 0x7F	; 127
 b82:	80 e8       	ldi	r24, 0x80	; 128
 b84:	70 e0       	ldi	r23, 0x00	; 0
 b86:	60 e0       	ldi	r22, 0x00	; 0
 b88:	08 95       	ret

00000b8a <__fp_nan>:
 b8a:	9f ef       	ldi	r25, 0xFF	; 255
 b8c:	80 ec       	ldi	r24, 0xC0	; 192
 b8e:	08 95       	ret

00000b90 <__fp_pscA>:
 b90:	00 24       	eor	r0, r0
 b92:	0a 94       	dec	r0
 b94:	16 16       	cp	r1, r22
 b96:	17 06       	cpc	r1, r23
 b98:	18 06       	cpc	r1, r24
 b9a:	09 06       	cpc	r0, r25
 b9c:	08 95       	ret

00000b9e <__fp_pscB>:
 b9e:	00 24       	eor	r0, r0
 ba0:	0a 94       	dec	r0
 ba2:	12 16       	cp	r1, r18
 ba4:	13 06       	cpc	r1, r19
 ba6:	14 06       	cpc	r1, r20
 ba8:	05 06       	cpc	r0, r21
 baa:	08 95       	ret

00000bac <__fp_round>:
 bac:	09 2e       	mov	r0, r25
 bae:	03 94       	inc	r0
 bb0:	00 0c       	add	r0, r0
 bb2:	11 f4       	brne	.+4      	; 0xbb8 <__fp_round+0xc>
 bb4:	88 23       	and	r24, r24
 bb6:	52 f0       	brmi	.+20     	; 0xbcc <__fp_round+0x20>
 bb8:	bb 0f       	add	r27, r27
 bba:	40 f4       	brcc	.+16     	; 0xbcc <__fp_round+0x20>
 bbc:	bf 2b       	or	r27, r31
 bbe:	11 f4       	brne	.+4      	; 0xbc4 <__fp_round+0x18>
 bc0:	60 ff       	sbrs	r22, 0
 bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__fp_round+0x20>
 bc4:	6f 5f       	subi	r22, 0xFF	; 255
 bc6:	7f 4f       	sbci	r23, 0xFF	; 255
 bc8:	8f 4f       	sbci	r24, 0xFF	; 255
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	08 95       	ret

00000bce <eeprom_read_byte>:
 bce:	f9 99       	sbic	0x1f, 1	; 31
 bd0:	fe cf       	rjmp	.-4      	; 0xbce <eeprom_read_byte>
 bd2:	92 bd       	out	0x22, r25	; 34
 bd4:	81 bd       	out	0x21, r24	; 33
 bd6:	f8 9a       	sbi	0x1f, 0	; 31
 bd8:	99 27       	eor	r25, r25
 bda:	80 b5       	in	r24, 0x20	; 32
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
