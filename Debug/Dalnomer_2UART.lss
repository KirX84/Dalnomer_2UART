
Dalnomer_2UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800220  00800220  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ee  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cee  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055d  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080b  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036d  00000000  00000000  0000326b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	e3 c0       	rjmp	.+454    	; 0x230 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	06 c1       	rjmp	.+524    	; 0x29e <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 34       	cpi	r26, 0x46	; 70
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	32 d0       	rcall	.+100    	; 0x184 <main>
 120:	59 c1       	rjmp	.+690    	; 0x3d4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z16UART_SendDataUSBPhh>:
unsigned char numOfDataSended_Dal;
unsigned char numOfDataReceived_Dal;
/***************************************************************************************/
void UART_SendDataUSB(uint8_t *pSendData, uint8_t nNumOfDataToSend)   //отправить бит по USB(UART0)
{
	sendDataPtr_USB = pSendData;
 124:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <sendDataPtr_USB+0x1>
 128:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <sendDataPtr_USB>
	numOfDataToSend_USB = nNumOfDataToSend;
 12c:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <numOfDataToSend_USB>
	numOfDataSended_USB = 0;
 130:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <numOfDataSended_USB>
	readyToExchange = false;
 134:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <readyToExchange>
	UCSR0B |= (1 << UDRIE0) | (1 << TXEN0);
 138:	e1 ec       	ldi	r30, 0xC1	; 193
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 62       	ori	r24, 0x28	; 40
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <_Z13UART_SendDataPhh>:
}
/***************************************************************************************/
void UART_SendData(uint8_t *pSendData, uint8_t nNumOfDataToSend)   //отправить бит на дальномер(UART1)
{
	sendDataPtr_Dal = pSendData;
 144:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <sendDataPtr_Dal+0x1>
 148:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <sendDataPtr_Dal>
	numOfDataToSend_Dal = nNumOfDataToSend;
 14c:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <numOfDataToSend_Dal>
	numOfDataSended_Dal = 0;
 150:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <numOfDataSended_Dal>
	readyToExchange = false;
 154:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <readyToExchange>
	UCSR1B |= (1 << UDRIE1) | (1 << TXEN1);
 158:	e9 ec       	ldi	r30, 0xC9	; 201
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 62       	ori	r24, 0x28	; 40
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <_Z16UART_ReceiveDataPhh>:
}
/***************************************************************************************/
void UART_ReceiveData(uint8_t* pReceivedData, uint8_t nNumOfDataToReceive)
{
	receivedDataPtr_Dal = pReceivedData;
 164:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <receivedDataPtr_Dal+0x1>
 168:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <receivedDataPtr_Dal>
	numOfDataToReceive_Dal = nNumOfDataToReceive;
 16c:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <numOfDataToReceive_Dal>
	numOfDataReceived_Dal = 0;
 170:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__data_end>
	readyToExchangeRec = false;
 174:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <readyToExchangeRec>
	UCSR0B |= (1 << RXCIE0) | (1 << RXEN0);
 178:	e1 ec       	ldi	r30, 0xC1	; 193
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 69       	ori	r24, 0x90	; 144
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <main>:
}
/***************************************************************************************/
int main(void)
{
	sei();
 184:	78 94       	sei
	UBRR0 = AVR_USART_9600_VALUE;
 186:	87 e6       	ldi	r24, 0x67	; 103
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 18e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f e3       	ldi	r24, 0x3F	; 63
 194:	9c e9       	ldi	r25, 0x9C	; 156
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x12>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x18>
 19c:	00 00       	nop
	_delay_ms(10);
	UART_SendData(Lazer_mm,5);
 19e:	65 e0       	ldi	r22, 0x05	; 5
 1a0:	87 e1       	ldi	r24, 0x17	; 23
 1a2:	92 e0       	ldi	r25, 0x02	; 2
 1a4:	cf df       	rcall	.-98     	; 0x144 <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 1a6:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <readyToExchange>
 1aa:	88 23       	and	r24, r24
 1ac:	f1 f3       	breq	.-4      	; 0x1aa <main+0x26>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x2e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x34>
 1b8:	00 00       	nop
	_delay_ms(10);
	UART_SendData(Lazer_0c,5);
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	c1 df       	rcall	.-126    	; 0x144 <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 1c2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <readyToExchange>
 1c6:	88 23       	and	r24, r24
 1c8:	f1 f3       	breq	.-4      	; 0x1c6 <main+0x42>
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	9c e9       	ldi	r25, 0x9C	; 156
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x4a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x50>
 1d4:	00 00       	nop
	_delay_ms(10);
	UART_SendData(Lazer_1g,5);
 1d6:	65 e0       	ldi	r22, 0x05	; 5
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	b3 df       	rcall	.-154    	; 0x144 <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 1de:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <readyToExchange>
 1e2:	88 23       	and	r24, r24
 1e4:	f1 f3       	breq	.-4      	; 0x1e2 <main+0x5e>
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	9c e9       	ldi	r25, 0x9C	; 156
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x66>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x6c>
 1f0:	00 00       	nop
	_delay_ms(10);
	UART_SendData(Lazer_start,4);
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	a5 df       	rcall	.-182    	; 0x144 <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 1fa:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <readyToExchange>
 1fe:	88 23       	and	r24, r24
 200:	f1 f3       	breq	.-4      	; 0x1fe <main+0x7a>
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	9c e9       	ldi	r25, 0x9C	; 156
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x82>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x88>
	_delay_ms(10);
	while(1)
	{
		UART_ReceiveData(Otvet_Lazer, 12);
 20c:	00 00       	nop
 20e:	6c e0       	ldi	r22, 0x0C	; 12
 210:	8a e3       	ldi	r24, 0x3A	; 58
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	a7 df       	rcall	.-178    	; 0x164 <_Z16UART_ReceiveDataPhh>
		while(!readyToExchangeRec);
 216:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <readyToExchangeRec>
 21a:	88 23       	and	r24, r24
		//_delay_ms(150);
		UART_SendDataUSB(Otvet_Lazer_TXT, 8);
 21c:	f1 f3       	breq	.-4      	; 0x21a <main+0x96>
 21e:	68 e0       	ldi	r22, 0x08	; 8
 220:	81 e3       	ldi	r24, 0x31	; 49
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	7f df       	rcall	.-258    	; 0x124 <_Z16UART_SendDataUSBPhh>
		while(!readyToExchangeUSB);
 226:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <readyToExchangeUSB>
 22a:	88 23       	and	r24, r24
 22c:	f1 f3       	breq	.-4      	; 0x22a <main+0xa6>
 22e:	ef cf       	rjmp	.-34     	; 0x20e <main+0x8a>

00000230 <__vector_26>:
		//_delay_ms(150);
	}
}
/***************************************************************************************/
ISR(USART0_UDRE_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	0b b6       	in	r0, 0x3b	; 59
 23c:	0f 92       	push	r0
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	UDR0 = *sendDataPtr_USB;
 246:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <sendDataPtr_USB>
 24a:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <sendDataPtr_USB+0x1>
 24e:	80 81       	ld	r24, Z
 250:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	sendDataPtr_USB++;
 254:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <sendDataPtr_USB>
 258:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <sendDataPtr_USB+0x1>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <sendDataPtr_USB+0x1>
 262:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <sendDataPtr_USB>
	numOfDataSended_USB++;
 266:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <numOfDataSended_USB>
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <numOfDataSended_USB>
	
	if (numOfDataSended_USB == numOfDataToSend_USB)
 270:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <numOfDataToSend_USB>
 274:	89 13       	cpse	r24, r25
 276:	08 c0       	rjmp	.+16     	; 0x288 <__vector_26+0x58>
	{
		UCSR0B &= ~(1 << UDRIE0);
 278:	e1 ec       	ldi	r30, 0xC1	; 193
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8f 7d       	andi	r24, 0xDF	; 223
 280:	80 83       	st	Z, r24
		readyToExchange = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <readyToExchange>
	}
}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0b be       	out	0x3b, r0	; 59
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_36>:
/***************************************************************************************/
ISR(USART1_RX_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	0b b6       	in	r0, 0x3b	; 59
 2aa:	0f 92       	push	r0
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	cf 93       	push	r28
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	Otvet_Lazer[0] = Otvet_Lazer[1];
 2c6:	ea e3       	ldi	r30, 0x3A	; 58
 2c8:	f2 e0       	ldi	r31, 0x02	; 2
 2ca:	91 81       	ldd	r25, Z+1	; 0x01
 2cc:	90 83       	st	Z, r25
	Otvet_Lazer[1] = Otvet_Lazer[2];
 2ce:	22 81       	ldd	r18, Z+2	; 0x02
 2d0:	21 83       	std	Z+1, r18	; 0x01
	Otvet_Lazer[2] = Otvet_Lazer[3];
 2d2:	33 81       	ldd	r19, Z+3	; 0x03
 2d4:	32 83       	std	Z+2, r19	; 0x02
	Otvet_Lazer[3] = Otvet_Lazer[4];
 2d6:	44 81       	ldd	r20, Z+4	; 0x04
 2d8:	43 83       	std	Z+3, r20	; 0x03
	Otvet_Lazer[4] = Otvet_Lazer[5];
 2da:	85 81       	ldd	r24, Z+5	; 0x05
 2dc:	84 83       	std	Z+4, r24	; 0x04
	Otvet_Lazer[5] = Otvet_Lazer[6];
 2de:	86 81       	ldd	r24, Z+6	; 0x06
 2e0:	85 83       	std	Z+5, r24	; 0x05
	Otvet_Lazer[6] = Otvet_Lazer[7];
 2e2:	57 81       	ldd	r21, Z+7	; 0x07
 2e4:	56 83       	std	Z+6, r21	; 0x06
	Otvet_Lazer[7] = Otvet_Lazer[8];
 2e6:	80 85       	ldd	r24, Z+8	; 0x08
 2e8:	87 83       	std	Z+7, r24	; 0x07
	Otvet_Lazer[8] = Otvet_Lazer[9];
 2ea:	81 85       	ldd	r24, Z+9	; 0x09
 2ec:	80 87       	std	Z+8, r24	; 0x08
	Otvet_Lazer[9] = Otvet_Lazer[10];
 2ee:	82 85       	ldd	r24, Z+10	; 0x0a
 2f0:	81 87       	std	Z+9, r24	; 0x09
	Otvet_Lazer[10] = Otvet_Lazer[11];
 2f2:	83 85       	ldd	r24, Z+11	; 0x0b
 2f4:	82 87       	std	Z+10, r24	; 0x0a
	Otvet_Lazer[11] = UDR1;
 2f6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 2fa:	63 87       	std	Z+11, r22	; 0x0b

	numOfDataReceived_Dal++;
 2fc:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
	
	if (numOfDataReceived_Dal == numOfDataToReceive_Dal)
 306:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <numOfDataToReceive_Dal>
 30a:	87 13       	cpse	r24, r23
 30c:	4f c0       	rjmp	.+158    	; 0x3ac <__vector_36+0x10e>
	{   
	    if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E))
 30e:	90 38       	cpi	r25, 0x80	; 128
 310:	09 f0       	breq	.+2      	; 0x314 <__vector_36+0x76>
 312:	4c c0       	rjmp	.+152    	; 0x3ac <__vector_36+0x10e>
 314:	26 30       	cpi	r18, 0x06	; 6
 316:	09 f0       	breq	.+2      	; 0x31a <__vector_36+0x7c>
 318:	49 c0       	rjmp	.+146    	; 0x3ac <__vector_36+0x10e>
 31a:	33 38       	cpi	r19, 0x83	; 131
 31c:	09 f0       	breq	.+2      	; 0x320 <__vector_36+0x82>
 31e:	46 c0       	rjmp	.+140    	; 0x3ac <__vector_36+0x10e>
 320:	40 33       	cpi	r20, 0x30	; 48
 322:	09 f0       	breq	.+2      	; 0x326 <__vector_36+0x88>
 324:	43 c0       	rjmp	.+134    	; 0x3ac <__vector_36+0x10e>
 326:	5e 32       	cpi	r21, 0x2E	; 46
 328:	09 f0       	breq	.+2      	; 0x32c <__vector_36+0x8e>
 32a:	40 c0       	rjmp	.+128    	; 0x3ac <__vector_36+0x10e>
 32c:	ee e3       	ldi	r30, 0x3E	; 62
 32e:	f2 e0       	ldi	r31, 0x02	; 2
 330:	a1 e3       	ldi	r26, 0x31	; 49
 332:	b2 e0       	ldi	r27, 0x02	; 2
 334:	45 e4       	ldi	r20, 0x45	; 69
 336:	52 e0       	ldi	r21, 0x02	; 2
	    {
		    int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		    Error_j = 0;
 338:	70 e0       	ldi	r23, 0x00	; 0
	
	if (numOfDataReceived_Dal == numOfDataToReceive_Dal)
	{   
	    if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E))
	    {
		    int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
 33a:	29 e3       	ldi	r18, 0x39	; 57
 33c:	31 e0       	ldi	r19, 0x01	; 1
		    for (int i=0; i <= 6; i++)
		    {
			    j = Otvet_Lazer[i+4];
			    CS=CS+j;
			    if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			    else Error_j=1;
 33e:	c1 e0       	ldi	r28, 0x01	; 1
	    {
		    int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		    Error_j = 0;
		    for (int i=0; i <= 6; i++)
		    {
			    j = Otvet_Lazer[i+4];
 340:	81 91       	ld	r24, Z+
			    CS=CS+j;
 342:	28 0f       	add	r18, r24
 344:	31 1d       	adc	r19, r1
			    if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
 346:	90 ed       	ldi	r25, 0xD0	; 208
 348:	98 0f       	add	r25, r24
 34a:	9b 30       	cpi	r25, 0x0B	; 11
 34c:	10 f0       	brcs	.+4      	; 0x352 <__vector_36+0xb4>
 34e:	8e 32       	cpi	r24, 0x2E	; 46
 350:	11 f4       	brne	.+4      	; 0x356 <__vector_36+0xb8>
 352:	8c 93       	st	X, r24
 354:	01 c0       	rjmp	.+2      	; 0x358 <__vector_36+0xba>
			    else Error_j=1;
 356:	7c 2f       	mov	r23, r28
 358:	11 96       	adiw	r26, 0x01	; 1
	{   
	    if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E))
	    {
		    int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		    Error_j = 0;
		    for (int i=0; i <= 6; i++)
 35a:	e4 17       	cp	r30, r20
 35c:	f5 07       	cpc	r31, r21
 35e:	81 f7       	brne	.-32     	; 0x340 <__vector_36+0xa2>
 360:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <Error_j>
 364:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <j>
			    j = Otvet_Lazer[i+4];
			    CS=CS+j;
			    if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			    else Error_j=1;
		    }
		    if ((Error_j == 0) && (256 - CS % 256 == Otvet_Lazer[11]))
 368:	71 11       	cpse	r23, r1
 36a:	18 c0       	rjmp	.+48     	; 0x39c <__vector_36+0xfe>
 36c:	30 78       	andi	r19, 0x80	; 128
 36e:	33 23       	and	r19, r19
 370:	2c f4       	brge	.+10     	; 0x37c <__vector_36+0xde>
 372:	21 50       	subi	r18, 0x01	; 1
 374:	31 09       	sbc	r19, r1
 376:	3f 6f       	ori	r19, 0xFF	; 255
 378:	2f 5f       	subi	r18, 0xFF	; 255
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	ac 01       	movw	r20, r24
 382:	42 1b       	sub	r20, r18
 384:	53 0b       	sbc	r21, r19
 386:	86 2f       	mov	r24, r22
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	48 17       	cp	r20, r24
 38c:	59 07       	cpc	r21, r25
 38e:	31 f4       	brne	.+12     	; 0x39c <__vector_36+0xfe>
		    {
			    Otvet_Lazer_TXT[7] = 0x0D;              //Ставим символ переноса в конце строки
 390:	e1 e3       	ldi	r30, 0x31	; 49
 392:	f2 e0       	ldi	r31, 0x02	; 2
 394:	8d e0       	ldi	r24, 0x0D	; 13
 396:	87 83       	std	Z+7, r24	; 0x07
			    Otvet_Lazer_TXT[2] = 0x2C;              //Ставим запятую вместо точки в число на выдачу
 398:	8c e2       	ldi	r24, 0x2C	; 44
 39a:	82 83       	std	Z+2, r24	; 0x02
			}
		UCSR0B &= ~((1 << RXCIE0) | (1 << RXEN0));
 39c:	e1 ec       	ldi	r30, 0xC1	; 193
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	8f 76       	andi	r24, 0x6F	; 111
 3a4:	80 83       	st	Z, r24
		readyToExchange = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <readyToExchange>
		}
	}
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	cf 91       	pop	r28
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0b be       	out	0x3b, r0	; 59
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
