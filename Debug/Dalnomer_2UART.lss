
Dalnomer_2UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000064  00800100  000006ce  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800164  00800164  000007e6  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000070  00000000  00000000  00000858  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fc0  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000980  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005a9  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000178  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000877  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000323  00000000  00000000  000031a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  000034c6  2**0
=======
  0 .data         00000020  00800200  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800220  00800220  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ee  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cee  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055d  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080b  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036d  00000000  00000000  0000326b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000035d8  2**0
>>>>>>> parent of d170438 (Optimization None)
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
<<<<<<< HEAD
  4c:	05 c2       	rjmp	.+1034   	; 0x458 <__vector_19>
=======
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
>>>>>>> parent of d170438 (Optimization None)
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	e3 c0       	rjmp	.+454    	; 0x230 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
<<<<<<< HEAD
  70:	3c c2       	rjmp	.+1144   	; 0x4ea <__vector_28>
  72:	00 00       	nop
  74:	a8 c1       	rjmp	.+848    	; 0x3c6 <__vector_29>
=======
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
>>>>>>> parent of d170438 (Optimization None)
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	06 c1       	rjmp	.+524    	; 0x29e <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

<<<<<<< HEAD
000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ec       	ldi	r30, 0xCE	; 206
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 36       	cpi	r26, 0x64	; 100
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e6       	ldi	r26, 0x64	; 100
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>
=======
000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e2       	ldi	r26, 0x20	; 32
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>
>>>>>>> parent of d170438 (Optimization None)

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

<<<<<<< HEAD
000000e0 <.do_clear_bss_start>:
  e0:	ab 38       	cpi	r26, 0x8B	; 139
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	74 d0       	rcall	.+232    	; 0x1d0 <main>
  e8:	f0 c2       	rjmp	.+1504   	; 0x6ca <_exit>
=======
00000118 <.do_clear_bss_start>:
 118:	a6 34       	cpi	r26, 0x46	; 70
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	32 d0       	rcall	.+100    	; 0x184 <main>
 120:	59 c1       	rjmp	.+690    	; 0x3d4 <_exit>
>>>>>>> parent of d170438 (Optimization None)

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z16UART_SendDataUSBPhh>:
unsigned char numOfDataSended_Dal;
unsigned char numOfDataReceived_Dal;
/***************************************************************************************/
void UART_SendDataUSB(uint8_t *pSendData, uint8_t nNumOfDataToSend)   //отправить бит по USB(UART0)
{
<<<<<<< HEAD
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <_Z13UART_SendDataPhh+0x6>
  f2:	1f 92       	push	r1
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	6b 83       	std	Y+3, r22	; 0x03
    sendDataPtr = pSendData;
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <sendDataPtr+0x1>
 106:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <sendDataPtr>
    numOfDataToSend = nNumOfDataToSend;
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <numOfDataToSend>
	//uart_send(pSendData);
    numOfDataSended = 0;
 110:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <numOfDataSended>
    readyToExchange = false;
 114:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <readyToExchange>
    UCSR1B |= (1 << UDRIE1);
 118:	89 ec       	ldi	r24, 0xC9	; 201
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	29 ec       	ldi	r18, 0xC9	; 201
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	20 62       	ori	r18, 0x20	; 32
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
}
 12a:	00 00       	nop
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret
=======
	sendDataPtr_USB = pSendData;
 124:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <sendDataPtr_USB+0x1>
 128:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <sendDataPtr_USB>
	numOfDataToSend_USB = nNumOfDataToSend;
 12c:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <numOfDataToSend_USB>
	numOfDataSended_USB = 0;
 130:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <numOfDataSended_USB>
	readyToExchange = false;
 134:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <readyToExchange>
	UCSR0B |= (1 << UDRIE0) | (1 << TXEN0);
 138:	e1 ec       	ldi	r30, 0xC1	; 193
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 62       	ori	r24, 0x28	; 40
 140:	80 83       	st	Z, r24
 142:	08 95       	ret
>>>>>>> parent of d170438 (Optimization None)

00000144 <_Z13UART_SendDataPhh>:
}
/***************************************************************************************/
void UART_SendData(uint8_t *pSendData, uint8_t nNumOfDataToSend)   //отправить бит на дальномер(UART1)
{
<<<<<<< HEAD
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <_Z16UART_SendDataUSBPhh+0x6>
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	6b 83       	std	Y+3, r22	; 0x03
	sendDataPtrUSB = pSendData;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <sendDataPtrUSB+0x1>
 152:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <sendDataPtrUSB>
	numOfDataToSendUSB = nNumOfDataToSend;
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <numOfDataToSendUSB>
	numOfDataSendedUSB = 0;
 15c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <numOfDataSendedUSB>
	readyToExchangeUSB = false;
 160:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <readyToExchangeUSB>
	UCSR0B |= (1 << UDRIE0);
 164:	81 ec       	ldi	r24, 0xC1	; 193
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	21 ec       	ldi	r18, 0xC1	; 193
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	20 62       	ori	r18, 0x20	; 32
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
}
 176:	00 00       	nop
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret
=======
	sendDataPtr_Dal = pSendData;
 144:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <sendDataPtr_Dal+0x1>
 148:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <sendDataPtr_Dal>
	numOfDataToSend_Dal = nNumOfDataToSend;
 14c:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <numOfDataToSend_Dal>
	numOfDataSended_Dal = 0;
 150:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <numOfDataSended_Dal>
	readyToExchange = false;
 154:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <readyToExchange>
	UCSR1B |= (1 << UDRIE1) | (1 << TXEN1);
 158:	e9 ec       	ldi	r30, 0xC9	; 201
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 62       	ori	r24, 0x28	; 40
 160:	80 83       	st	Z, r24
 162:	08 95       	ret
>>>>>>> parent of d170438 (Optimization None)

00000164 <_Z16UART_ReceiveDataPhh>:
}
/***************************************************************************************/
void UART_ReceiveData(uint8_t* pReceivedData, uint8_t nNumOfDataToReceive)
{
<<<<<<< HEAD
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <_Z16UART_ReceiveDataPhh+0x6>
 18a:	1f 92       	push	r1
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	6b 83       	std	Y+3, r22	; 0x03
    receivedDataPtr = pReceivedData;
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <receivedDataPtr+0x1>
 19e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <receivedDataPtr>
    numOfDataToReceive = nNumOfDataToReceive;
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <numOfDataToReceive>
    numOfDataReceived = 0;
 1a8:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <numOfDataReceived>
    readyToExchangeRec = false;
 1ac:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <readyToExchangeRec>
    UCSR1B |= (1 << RXCIE1);
 1b0:	89 ec       	ldi	r24, 0xC9	; 201
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	29 ec       	ldi	r18, 0xC9	; 201
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	20 68       	ori	r18, 0x80	; 128
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
}
 1c2:	00 00       	nop
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret
=======
	receivedDataPtr_Dal = pReceivedData;
 164:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <receivedDataPtr_Dal+0x1>
 168:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <receivedDataPtr_Dal>
	numOfDataToReceive_Dal = nNumOfDataToReceive;
 16c:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <numOfDataToReceive_Dal>
	numOfDataReceived_Dal = 0;
 170:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <__data_end>
	readyToExchangeRec = false;
 174:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <readyToExchangeRec>
	UCSR0B |= (1 << RXCIE0) | (1 << RXEN0);
 178:	e1 ec       	ldi	r30, 0xC1	; 193
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 69       	ori	r24, 0x90	; 144
 180:	80 83       	st	Z, r24
 182:	08 95       	ret
>>>>>>> parent of d170438 (Optimization None)

00000184 <main>:
}
/***************************************************************************************/
int main(void)
{
<<<<<<< HEAD
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
	if(eeprom_read_byte(&num_dal_addr) == 0xFFFF) num_dal = 0;
	else num_dal = eeprom_read_byte(&num_dal_addr);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	6e d2       	rcall	.+1244   	; 0x6ba <eeprom_read_byte>
 1de:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <num_dal>
	if(eeprom_read_byte(&op_mode_addr) == 0xFFFF) op_mode = 0;
	else num_dal = eeprom_read_byte(&op_mode_addr);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	69 d2       	rcall	.+1234   	; 0x6ba <eeprom_read_byte>
 1e8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <num_dal>
	if(!(num_dal/10))
 1ec:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <num_dal>
 1f0:	8a 30       	cpi	r24, 0x0A	; 10
 1f2:	a8 f4       	brcc	.+42     	; 0x21e <main+0x4e>
	{
		Zapros_one_zam_one[1] = '0x30' + num_dal;
 1f4:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <num_dal>
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Zapros_one_zam_one+0x1>
		Zapros_nepr_zam_one[1] = '0x30'+ num_dal;
 1fe:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <num_dal>
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Zapros_nepr_zam_one+0x1>
		Zapros_number_one[1] = '0x30'+ num_dal;
 208:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <num_dal>
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Zapros_number_one+0x1>
		Zapros_save_one[1] = '0x30'+ num_dal;
 212:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <num_dal>
 216:	80 5d       	subi	r24, 0xD0	; 208
 218:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Zapros_save_one+0x1>
 21c:	80 c0       	rjmp	.+256    	; 0x31e <main+0x14e>
	}
	else
	{
		Zapros_one_zam_two[1] = '0x30' + (num_dal/10);
 21e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <num_dal>
 222:	8d ec       	ldi	r24, 0xCD	; 205
 224:	98 9f       	mul	r25, r24
 226:	81 2d       	mov	r24, r1
 228:	11 24       	eor	r1, r1
 22a:	86 95       	lsr	r24
 22c:	86 95       	lsr	r24
 22e:	86 95       	lsr	r24
 230:	80 5d       	subi	r24, 0xD0	; 208
 232:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Zapros_one_zam_two+0x1>
		Zapros_one_zam_two[2] = '0x30' + (num_dal%10);
 236:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <num_dal>
 23a:	8d ec       	ldi	r24, 0xCD	; 205
 23c:	98 9f       	mul	r25, r24
 23e:	81 2d       	mov	r24, r1
 240:	11 24       	eor	r1, r1
 242:	86 95       	lsr	r24
 244:	86 95       	lsr	r24
 246:	86 95       	lsr	r24
 248:	88 0f       	add	r24, r24
 24a:	28 2f       	mov	r18, r24
 24c:	22 0f       	add	r18, r18
 24e:	22 0f       	add	r18, r18
 250:	82 0f       	add	r24, r18
 252:	29 2f       	mov	r18, r25
 254:	28 1b       	sub	r18, r24
 256:	82 2f       	mov	r24, r18
 258:	80 5d       	subi	r24, 0xD0	; 208
 25a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Zapros_one_zam_two+0x2>
		Zapros_nepr_zam_two[1] = '0x30' + (num_dal/10);
 25e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <num_dal>
 262:	8d ec       	ldi	r24, 0xCD	; 205
 264:	98 9f       	mul	r25, r24
 266:	81 2d       	mov	r24, r1
 268:	11 24       	eor	r1, r1
 26a:	86 95       	lsr	r24
 26c:	86 95       	lsr	r24
 26e:	86 95       	lsr	r24
 270:	80 5d       	subi	r24, 0xD0	; 208
 272:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Zapros_nepr_zam_two+0x1>
		Zapros_nepr_zam_two[2] = '0x30' + (num_dal%10);
 276:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <num_dal>
 27a:	8d ec       	ldi	r24, 0xCD	; 205
 27c:	98 9f       	mul	r25, r24
 27e:	81 2d       	mov	r24, r1
 280:	11 24       	eor	r1, r1
 282:	86 95       	lsr	r24
 284:	86 95       	lsr	r24
 286:	86 95       	lsr	r24
 288:	88 0f       	add	r24, r24
 28a:	28 2f       	mov	r18, r24
 28c:	22 0f       	add	r18, r18
 28e:	22 0f       	add	r18, r18
 290:	82 0f       	add	r24, r18
 292:	e9 2f       	mov	r30, r25
 294:	e8 1b       	sub	r30, r24
 296:	8e 2f       	mov	r24, r30
 298:	80 5d       	subi	r24, 0xD0	; 208
 29a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Zapros_nepr_zam_two+0x2>
		Zapros_number_two[1] = '0x30' + (num_dal/10);
 29e:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <num_dal>
 2a2:	8d ec       	ldi	r24, 0xCD	; 205
 2a4:	98 9f       	mul	r25, r24
 2a6:	81 2d       	mov	r24, r1
 2a8:	11 24       	eor	r1, r1
 2aa:	86 95       	lsr	r24
 2ac:	86 95       	lsr	r24
 2ae:	86 95       	lsr	r24
 2b0:	80 5d       	subi	r24, 0xD0	; 208
 2b2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Zapros_number_two+0x1>
		Zapros_number_two[2] = '0x30' + (num_dal%10);
 2b6:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <num_dal>
 2ba:	8d ec       	ldi	r24, 0xCD	; 205
 2bc:	98 9f       	mul	r25, r24
 2be:	81 2d       	mov	r24, r1
 2c0:	11 24       	eor	r1, r1
 2c2:	86 95       	lsr	r24
 2c4:	86 95       	lsr	r24
 2c6:	86 95       	lsr	r24
 2c8:	88 0f       	add	r24, r24
 2ca:	28 2f       	mov	r18, r24
 2cc:	22 0f       	add	r18, r18
 2ce:	22 0f       	add	r18, r18
 2d0:	82 0f       	add	r24, r18
 2d2:	f9 2f       	mov	r31, r25
 2d4:	f8 1b       	sub	r31, r24
 2d6:	8f 2f       	mov	r24, r31
 2d8:	80 5d       	subi	r24, 0xD0	; 208
 2da:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Zapros_number_two+0x2>
		Zapros_save_two[1] = '0x30' + (num_dal/10);
 2de:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <num_dal>
 2e2:	8d ec       	ldi	r24, 0xCD	; 205
 2e4:	98 9f       	mul	r25, r24
 2e6:	81 2d       	mov	r24, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	86 95       	lsr	r24
 2ec:	86 95       	lsr	r24
 2ee:	86 95       	lsr	r24
 2f0:	80 5d       	subi	r24, 0xD0	; 208
 2f2:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Zapros_save_two+0x1>
		Zapros_save_two[2] = '0x30' + (num_dal%10);
 2f6:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <num_dal>
 2fa:	8d ec       	ldi	r24, 0xCD	; 205
 2fc:	98 9f       	mul	r25, r24
 2fe:	81 2d       	mov	r24, r1
 300:	11 24       	eor	r1, r1
 302:	86 95       	lsr	r24
 304:	86 95       	lsr	r24
 306:	86 95       	lsr	r24
 308:	88 0f       	add	r24, r24
 30a:	28 2f       	mov	r18, r24
 30c:	22 0f       	add	r18, r18
 30e:	22 0f       	add	r18, r18
 310:	82 0f       	add	r24, r18
 312:	29 2f       	mov	r18, r25
 314:	28 1b       	sub	r18, r24
 316:	82 2f       	mov	r24, r18
 318:	80 5d       	subi	r24, 0xD0	; 208
 31a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <Zapros_save_two+0x2>
	}
	//Анализатор команд

	//eeprom_write_byte(&num_dal_addr, num_dal);
    sei();
 31e:	78 94       	sei

	UBRR0H = 0;
 320:	85 ec       	ldi	r24, 0xC5	; 197
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	fc 01       	movw	r30, r24
 326:	10 82       	st	Z, r1
	UBRR0L = 103; //скорость 9600
 328:	84 ec       	ldi	r24, 0xC4	; 196
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	27 e6       	ldi	r18, 0x67	; 103
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
	//UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<UDRIE0); // разрешаем прием, передачу и прерывания по окончанию приема и опустошению буфера
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // разрешаем прием, передачу
 332:	81 ec       	ldi	r24, 0xC1	; 193
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	28 e1       	ldi	r18, 0x18	; 24
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); //8 бит, 1 стоп бит
 33c:	82 ec       	ldi	r24, 0xC2	; 194
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	26 e0       	ldi	r18, 0x06	; 6
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
	UBRR1H = 0;
 346:	8d ec       	ldi	r24, 0xCD	; 205
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	fc 01       	movw	r30, r24
 34c:	10 82       	st	Z, r1
	UBRR1L = 103; //скорость 9600
 34e:	8c ec       	ldi	r24, 0xCC	; 204
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	27 e6       	ldi	r18, 0x67	; 103
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
	//UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1)|(1<<UDRIE1); // разрешаем прием, передачу и прерывания по окончанию приема и опустошению буфера
	UCSR1B = (1<<RXEN1)|(1<<TXEN1); // разрешаем прием, передачу
 358:	89 ec       	ldi	r24, 0xC9	; 201
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	28 e1       	ldi	r18, 0x18	; 24
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10); //8 бит, 1 стоп бит
 362:	8a ec       	ldi	r24, 0xCA	; 202
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	26 e0       	ldi	r18, 0x06	; 6
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
=======
	sei();
 184:	78 94       	sei
>>>>>>> parent of d170438 (Optimization None)
	UBRR0 = AVR_USART_9600_VALUE;
 186:	87 e6       	ldi	r24, 0x67	; 103
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 18e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f e3       	ldi	r24, 0x3F	; 63
 194:	9c e9       	ldi	r25, 0x9C	; 156
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x12>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x18>
 19c:	00 00       	nop
	_delay_ms(10);
	UART_SendData(Lazer_mm,5);
 19e:	65 e0       	ldi	r22, 0x05	; 5
 1a0:	87 e1       	ldi	r24, 0x17	; 23
 1a2:	92 e0       	ldi	r25, 0x02	; 2
 1a4:	cf df       	rcall	.-98     	; 0x144 <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 1a6:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <readyToExchange>
 1aa:	88 23       	and	r24, r24
 1ac:	f1 f3       	breq	.-4      	; 0x1aa <main+0x26>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x2e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x34>
 1b8:	00 00       	nop
	_delay_ms(10);
	UART_SendData(Lazer_0c,5);
<<<<<<< HEAD
 36c:	65 e0       	ldi	r22, 0x05	; 5
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	bc de       	rcall	.-648    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 374:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <readyToExchange>
 378:	88 23       	and	r24, r24
 37a:	09 f4       	brne	.+2      	; 0x37e <main+0x1ae>
 37c:	fb cf       	rjmp	.-10     	; 0x374 <main+0x1a4>
	//_delay_ms(10);
	UART_SendData(Lazer_1g,5);
 37e:	65 e0       	ldi	r22, 0x05	; 5
 380:	88 e0       	ldi	r24, 0x08	; 8
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	b3 de       	rcall	.-666    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 386:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <readyToExchange>
 38a:	88 23       	and	r24, r24
 38c:	09 f4       	brne	.+2      	; 0x390 <main+0x1c0>
	//_delay_ms(10);
	UART_SendData(Lazer_nepr_zam,4);
 38e:	fb cf       	rjmp	.-10     	; 0x386 <main+0x1b6>
 390:	64 e0       	ldi	r22, 0x04	; 4
 392:	80 e1       	ldi	r24, 0x10	; 16
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	aa de       	rcall	.-684    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 398:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <readyToExchange>
 39c:	88 23       	and	r24, r24
 39e:	09 f4       	brne	.+2      	; 0x3a2 <main+0x1d2>
	"\x67\x30\x73\x76\x2B\x30\x30",
	 sizeof testBuffer);*/
	//testBuffer = {0x67, 0x30, 0x73, 0x76, 0x2B, 0x30, 0x30};
    while(1)
    {
        UART_ReceiveData(Otvet_Lazer, 12);
 3a0:	fb cf       	rjmp	.-10     	; 0x398 <main+0x1c8>
 3a2:	6c e0       	ldi	r22, 0x0C	; 12
 3a4:	84 e6       	ldi	r24, 0x64	; 100
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	ed de       	rcall	.-550    	; 0x184 <_Z16UART_ReceiveDataPhh>
		while(!readyToExchangeRec);
 3aa:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <readyToExchangeRec>
 3ae:	88 23       	and	r24, r24
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <main+0x1e4>
		//_delay_ms(150);
		UART_SendDataUSB(Otvet_Lazer_TXT, 8);
 3b2:	fb cf       	rjmp	.-10     	; 0x3aa <main+0x1da>
 3b4:	68 e0       	ldi	r22, 0x08	; 8
 3b6:	80 e7       	ldi	r24, 0x70	; 112
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	be de       	rcall	.-644    	; 0x138 <_Z16UART_SendDataUSBPhh>
		while(!readyToExchangeUSB);
 3bc:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <readyToExchangeUSB>
 3c0:	88 23       	and	r24, r24
 3c2:	79 f7       	brne	.-34     	; 0x3a2 <main+0x1d2>
 3c4:	fb cf       	rjmp	.-10     	; 0x3bc <main+0x1ec>

000003c6 <__vector_29>:
=======
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	8f e0       	ldi	r24, 0x0F	; 15
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	c1 df       	rcall	.-126    	; 0x144 <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 1c2:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <readyToExchange>
 1c6:	88 23       	and	r24, r24
 1c8:	f1 f3       	breq	.-4      	; 0x1c6 <main+0x42>
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	9c e9       	ldi	r25, 0x9C	; 156
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x4a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x50>
 1d4:	00 00       	nop
	_delay_ms(10);
	UART_SendData(Lazer_1g,5);
 1d6:	65 e0       	ldi	r22, 0x05	; 5
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	b3 df       	rcall	.-154    	; 0x144 <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 1de:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <readyToExchange>
 1e2:	88 23       	and	r24, r24
 1e4:	f1 f3       	breq	.-4      	; 0x1e2 <main+0x5e>
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	9c e9       	ldi	r25, 0x9C	; 156
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x66>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x6c>
 1f0:	00 00       	nop
	_delay_ms(10);
	UART_SendData(Lazer_start,4);
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	a5 df       	rcall	.-182    	; 0x144 <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 1fa:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <readyToExchange>
 1fe:	88 23       	and	r24, r24
 200:	f1 f3       	breq	.-4      	; 0x1fe <main+0x7a>
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	9c e9       	ldi	r25, 0x9C	; 156
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x82>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x88>
	_delay_ms(10);
	while(1)
	{
		UART_ReceiveData(Otvet_Lazer, 12);
 20c:	00 00       	nop
 20e:	6c e0       	ldi	r22, 0x0C	; 12
 210:	8a e3       	ldi	r24, 0x3A	; 58
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	a7 df       	rcall	.-178    	; 0x164 <_Z16UART_ReceiveDataPhh>
		while(!readyToExchangeRec);
 216:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <readyToExchangeRec>
 21a:	88 23       	and	r24, r24
		//_delay_ms(150);
		UART_SendDataUSB(Otvet_Lazer_TXT, 8);
 21c:	f1 f3       	breq	.-4      	; 0x21a <main+0x96>
 21e:	68 e0       	ldi	r22, 0x08	; 8
 220:	81 e3       	ldi	r24, 0x31	; 49
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	7f df       	rcall	.-258    	; 0x124 <_Z16UART_SendDataUSBPhh>
		while(!readyToExchangeUSB);
 226:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <readyToExchangeUSB>
 22a:	88 23       	and	r24, r24
 22c:	f1 f3       	breq	.-4      	; 0x22a <main+0xa6>
 22e:	ef cf       	rjmp	.-34     	; 0x20e <main+0x8a>

00000230 <__vector_26>:
>>>>>>> parent of d170438 (Optimization None)
		//_delay_ms(150);
	}
}
/***************************************************************************************/
<<<<<<< HEAD
ISR(USART1_UDRE_vect)
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
    UDR1 = *sendDataPtr;
 3e6:	8e ec       	ldi	r24, 0xCE	; 206
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <sendDataPtr>
 3ee:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <sendDataPtr+0x1>
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
    sendDataPtr++;
 3fa:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <sendDataPtr>
 3fe:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <sendDataPtr+0x1>
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <sendDataPtr+0x1>
 408:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <sendDataPtr>
    numOfDataSended++;
 40c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <numOfDataSended>
 410:	8f 5f       	subi	r24, 0xFF	; 255
 412:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <numOfDataSended>
    
    if (numOfDataSended == numOfDataToSend)
 416:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <numOfDataSended>
 41a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <numOfDataToSend>
 41e:	98 17       	cp	r25, r24
 420:	61 f4       	brne	.+24     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
    {
        UCSR1B &= ~(1 << UDRIE1);
 422:	89 ec       	ldi	r24, 0xC9	; 201
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	29 ec       	ldi	r18, 0xC9	; 201
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	20 81       	ld	r18, Z
 42e:	2f 7d       	andi	r18, 0xDF	; 223
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
        readyToExchange = 1;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <readyToExchange>
    }
}
 43a:	00 00       	nop
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_19>:
/***************************************************************************************/
ISR(USART0_UDRE_vect)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
	UDR0 = *sendDataPtrUSB;
 478:	86 ec       	ldi	r24, 0xC6	; 198
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <sendDataPtrUSB>
 480:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <sendDataPtrUSB+0x1>
 484:	f9 01       	movw	r30, r18
 486:	20 81       	ld	r18, Z
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18
	sendDataPtrUSB++;
 48c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <sendDataPtrUSB>
 490:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <sendDataPtrUSB+0x1>
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <sendDataPtrUSB+0x1>
 49a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <sendDataPtrUSB>
	numOfDataSendedUSB++;
 49e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <numOfDataSendedUSB>
 4a2:	8f 5f       	subi	r24, 0xFF	; 255
 4a4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <numOfDataSendedUSB>
	
	if (numOfDataSendedUSB == numOfDataToSendUSB)
 4a8:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <numOfDataSendedUSB>
 4ac:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <numOfDataToSendUSB>
 4b0:	98 17       	cp	r25, r24
 4b2:	61 f4       	brne	.+24     	; 0x4cc <__vector_19+0x74>
	{
		UCSR0B &= ~(1 << UDRIE0);
 4b4:	81 ec       	ldi	r24, 0xC1	; 193
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	21 ec       	ldi	r18, 0xC1	; 193
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	f9 01       	movw	r30, r18
 4be:	20 81       	ld	r18, Z
 4c0:	2f 7d       	andi	r18, 0xDF	; 223
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
		readyToExchangeUSB = 1;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <readyToExchangeUSB>
	}
}
 4cc:	00 00       	nop
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	9f 91       	pop	r25
 4d8:	8f 91       	pop	r24
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	0f 90       	pop	r0
 4e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 4e4:	0f 90       	pop	r0
 4e6:	1f 90       	pop	r1
 4e8:	18 95       	reti

000004ea <__vector_28>:
/***************************************************************************************/
ISR(USART1_RX_vect)
{
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	8f 93       	push	r24
 500:	9f 93       	push	r25
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	00 d0       	rcall	.+0      	; 0x50c <__vector_28+0x22>
 50c:	00 d0       	rcall	.+0      	; 0x50e <__vector_28+0x24>
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
		UCSR1B &= ~((1 << RXCIE1) | (1 << RXEN1));
		readyToExchangeRec = 1;
	}*/


    Otvet_Lazer[0] = Otvet_Lazer[1];
 512:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <__data_end+0x1>
 516:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end>
    Otvet_Lazer[1] = Otvet_Lazer[2];
 51a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end+0x2>
 51e:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <__data_end+0x1>
    Otvet_Lazer[2] = Otvet_Lazer[3];
 522:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <__data_end+0x3>
 526:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end+0x2>
    Otvet_Lazer[3] = Otvet_Lazer[4];
 52a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end+0x4>
 52e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <__data_end+0x3>
    Otvet_Lazer[4] = Otvet_Lazer[5];
 532:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <__data_end+0x5>
 536:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end+0x4>
    Otvet_Lazer[5] = Otvet_Lazer[6];
 53a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end+0x6>
 53e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__data_end+0x5>
    Otvet_Lazer[6] = Otvet_Lazer[7];
 542:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <__data_end+0x7>
 546:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end+0x6>
    Otvet_Lazer[7] = Otvet_Lazer[8];
 54a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end+0x8>
 54e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <__data_end+0x7>
    Otvet_Lazer[8] = Otvet_Lazer[9];
 552:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <__data_end+0x9>
 556:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end+0x8>
    Otvet_Lazer[9] = Otvet_Lazer[10];
 55a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end+0xa>
 55e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__data_end+0x9>
    Otvet_Lazer[10] = Otvet_Lazer[11];
 562:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <__data_end+0xb>
 566:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end+0xa>
    Otvet_Lazer[11] = UDR1;
 56a:	8e ec       	ldi	r24, 0xCE	; 206
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	fc 01       	movw	r30, r24
 570:	80 81       	ld	r24, Z
 572:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__data_end+0xb>

	//UART_SendDataUSB(Otvet_Lazer, 12);
    //*receivedDataPtr = UDR1;

	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E)) 
 576:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 57a:	80 38       	cpi	r24, 0x80	; 128
 57c:	09 f0       	breq	.+2      	; 0x580 <__vector_28+0x96>
 57e:	88 c0       	rjmp	.+272    	; 0x690 <__vector_28+0x1a6>
 580:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <__data_end+0x1>
 584:	86 30       	cpi	r24, 0x06	; 6
 586:	09 f0       	breq	.+2      	; 0x58a <__vector_28+0xa0>
 588:	83 c0       	rjmp	.+262    	; 0x690 <__vector_28+0x1a6>
 58a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end+0x2>
 58e:	83 38       	cpi	r24, 0x83	; 131
 590:	09 f0       	breq	.+2      	; 0x594 <__vector_28+0xaa>
 592:	7e c0       	rjmp	.+252    	; 0x690 <__vector_28+0x1a6>
 594:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <__data_end+0x3>
 598:	80 33       	cpi	r24, 0x30	; 48
 59a:	09 f0       	breq	.+2      	; 0x59e <__vector_28+0xb4>
 59c:	79 c0       	rjmp	.+242    	; 0x690 <__vector_28+0x1a6>
 59e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end+0x6>
 5a2:	8e 32       	cpi	r24, 0x2E	; 46
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__vector_28+0xbe>
 5a6:	74 c0       	rjmp	.+232    	; 0x690 <__vector_28+0x1a6>
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
 5a8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <__data_end+0x1>
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	28 0f       	add	r18, r24
 5ba:	39 1f       	adc	r19, r25
 5bc:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end+0x2>
 5c0:	88 2f       	mov	r24, r24
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	28 0f       	add	r18, r24
 5c6:	39 1f       	adc	r19, r25
 5c8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <__data_end+0x3>
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	82 0f       	add	r24, r18
 5d2:	93 1f       	adc	r25, r19
 5d4:	9a 83       	std	Y+2, r25	; 0x02
 5d6:	89 83       	std	Y+1, r24	; 0x01
		Error_j = 0;
 5d8:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <Error_j>
		for (int i=0; i <= 6; i++) 
 5dc:	1c 82       	std	Y+4, r1	; 0x04
 5de:	1b 82       	std	Y+3, r1	; 0x03
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	9c 81       	ldd	r25, Y+4	; 0x04
 5e4:	07 97       	sbiw	r24, 0x07	; 7
 5e6:	8c f5       	brge	.+98     	; 0x64a <__vector_28+0x160>
		{
			j = Otvet_Lazer[i+4];
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	9c 81       	ldd	r25, Y+4	; 0x04
 5ec:	04 96       	adiw	r24, 0x04	; 4
 5ee:	8c 59       	subi	r24, 0x9C	; 156
 5f0:	9e 4f       	sbci	r25, 0xFE	; 254
 5f2:	fc 01       	movw	r30, r24
 5f4:	80 81       	ld	r24, Z
 5f6:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <j>
			CS=CS+j;
 5fa:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <j>
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	29 81       	ldd	r18, Y+1	; 0x01
 604:	3a 81       	ldd	r19, Y+2	; 0x02
 606:	82 0f       	add	r24, r18
 608:	93 1f       	adc	r25, r19
 60a:	9a 83       	std	Y+2, r25	; 0x02
 60c:	89 83       	std	Y+1, r24	; 0x01
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
 60e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <j>
 612:	80 33       	cpi	r24, 0x30	; 48
 614:	20 f0       	brcs	.+8      	; 0x61e <__vector_28+0x134>
 616:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <j>
 61a:	8b 33       	cpi	r24, 0x3B	; 59
 61c:	20 f0       	brcs	.+8      	; 0x626 <__vector_28+0x13c>
 61e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <j>
 622:	8e 32       	cpi	r24, 0x2E	; 46
 624:	49 f4       	brne	.+18     	; 0x638 <__vector_28+0x14e>
 626:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <j>
 62a:	8b 81       	ldd	r24, Y+3	; 0x03
 62c:	9c 81       	ldd	r25, Y+4	; 0x04
 62e:	80 59       	subi	r24, 0x90	; 144
 630:	9e 4f       	sbci	r25, 0xFE	; 254
 632:	fc 01       	movw	r30, r24
 634:	20 83       	st	Z, r18
 636:	03 c0       	rjmp	.+6      	; 0x63e <__vector_28+0x154>
			else Error_j=1;
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <Error_j>

	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E)) 
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		Error_j = 0;
		for (int i=0; i <= 6; i++) 
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	9c 81       	ldd	r25, Y+4	; 0x04
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	9c 83       	std	Y+4, r25	; 0x04
 646:	8b 83       	std	Y+3, r24	; 0x03
 648:	cb cf       	rjmp	.-106    	; 0x5e0 <__vector_28+0xf6>
			j = Otvet_Lazer[i+4];
			CS=CS+j;
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			else Error_j=1;
		}
		if ((Error_j == 0) && (256 - CS % 256 == Otvet_Lazer[11])) 
 64a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Error_j>
 64e:	88 23       	and	r24, r24
 650:	f9 f4       	brne	.+62     	; 0x690 <__vector_28+0x1a6>
 652:	89 81       	ldd	r24, Y+1	; 0x01
 654:	9a 81       	ldd	r25, Y+2	; 0x02
 656:	90 78       	andi	r25, 0x80	; 128
 658:	99 23       	and	r25, r25
 65a:	1c f4       	brge	.+6      	; 0x662 <__vector_28+0x178>
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	9f 6f       	ori	r25, 0xFF	; 255
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	9c 01       	movw	r18, r24
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	ac 01       	movw	r20, r24
 66a:	42 1b       	sub	r20, r18
 66c:	53 0b       	sbc	r21, r19
 66e:	9a 01       	movw	r18, r20
 670:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <__data_end+0xb>
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	28 17       	cp	r18, r24
 67a:	39 07       	cpc	r19, r25
 67c:	49 f4       	brne	.+18     	; 0x690 <__vector_28+0x1a6>
		{
			Otvet_Lazer_TXT[7] = 0x0D;              //Ставим символ переноса в конце строки
 67e:	8d e0       	ldi	r24, 0x0D	; 13
 680:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <Otvet_Lazer_TXT+0x7>
			Otvet_Lazer_TXT[2] = 0x2C;              //Ставим запятую вместо точки в число на выдачу
 684:	8c e2       	ldi	r24, 0x2C	; 44
 686:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <Otvet_Lazer_TXT+0x2>
			//UART_SendDataUSB(Otvet_Lazer_TXT, 8);
			//while(!readyToExchangeUSB);
			//_delay_ms(150);
			readyToExchangeRec = 1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <readyToExchangeRec>
    /*if (numOfDataReceived == numOfDataToReceive)
    {
        UCSR1B &= ~((1 << RXCIE1) | (1 << RXEN1));
        readyToExchangeUSB = 1;
    }*/
}
 690:	00 00       	nop
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	9f 91       	pop	r25
 6a4:	8f 91       	pop	r24
 6a6:	5f 91       	pop	r21
 6a8:	4f 91       	pop	r20
 6aa:	3f 91       	pop	r19
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <eeprom_read_byte>:
 6ba:	f9 99       	sbic	0x1f, 1	; 31
 6bc:	fe cf       	rjmp	.-4      	; 0x6ba <eeprom_read_byte>
 6be:	92 bd       	out	0x22, r25	; 34
 6c0:	81 bd       	out	0x21, r24	; 33
 6c2:	f8 9a       	sbi	0x1f, 0	; 31
 6c4:	99 27       	eor	r25, r25
 6c6:	80 b5       	in	r24, 0x20	; 32
 6c8:	08 95       	ret

000006ca <_exit>:
 6ca:	f8 94       	cli

000006cc <__stop_program>:
 6cc:	ff cf       	rjmp	.-2      	; 0x6cc <__stop_program>
=======
ISR(USART0_UDRE_vect)
{
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	0b b6       	in	r0, 0x3b	; 59
 23c:	0f 92       	push	r0
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	UDR0 = *sendDataPtr_USB;
 246:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <sendDataPtr_USB>
 24a:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <sendDataPtr_USB+0x1>
 24e:	80 81       	ld	r24, Z
 250:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	sendDataPtr_USB++;
 254:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <sendDataPtr_USB>
 258:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <sendDataPtr_USB+0x1>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <sendDataPtr_USB+0x1>
 262:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <sendDataPtr_USB>
	numOfDataSended_USB++;
 266:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <numOfDataSended_USB>
 26a:	8f 5f       	subi	r24, 0xFF	; 255
 26c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <numOfDataSended_USB>
	
	if (numOfDataSended_USB == numOfDataToSend_USB)
 270:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <numOfDataToSend_USB>
 274:	89 13       	cpse	r24, r25
 276:	08 c0       	rjmp	.+16     	; 0x288 <__vector_26+0x58>
	{
		UCSR0B &= ~(1 << UDRIE0);
 278:	e1 ec       	ldi	r30, 0xC1	; 193
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8f 7d       	andi	r24, 0xDF	; 223
 280:	80 83       	st	Z, r24
		readyToExchange = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <readyToExchange>
	}
}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0b be       	out	0x3b, r0	; 59
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_36>:
/***************************************************************************************/
ISR(USART1_RX_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	0b b6       	in	r0, 0x3b	; 59
 2aa:	0f 92       	push	r0
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	cf 93       	push	r28
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	Otvet_Lazer[0] = Otvet_Lazer[1];
 2c6:	ea e3       	ldi	r30, 0x3A	; 58
 2c8:	f2 e0       	ldi	r31, 0x02	; 2
 2ca:	91 81       	ldd	r25, Z+1	; 0x01
 2cc:	90 83       	st	Z, r25
	Otvet_Lazer[1] = Otvet_Lazer[2];
 2ce:	22 81       	ldd	r18, Z+2	; 0x02
 2d0:	21 83       	std	Z+1, r18	; 0x01
	Otvet_Lazer[2] = Otvet_Lazer[3];
 2d2:	33 81       	ldd	r19, Z+3	; 0x03
 2d4:	32 83       	std	Z+2, r19	; 0x02
	Otvet_Lazer[3] = Otvet_Lazer[4];
 2d6:	44 81       	ldd	r20, Z+4	; 0x04
 2d8:	43 83       	std	Z+3, r20	; 0x03
	Otvet_Lazer[4] = Otvet_Lazer[5];
 2da:	85 81       	ldd	r24, Z+5	; 0x05
 2dc:	84 83       	std	Z+4, r24	; 0x04
	Otvet_Lazer[5] = Otvet_Lazer[6];
 2de:	86 81       	ldd	r24, Z+6	; 0x06
 2e0:	85 83       	std	Z+5, r24	; 0x05
	Otvet_Lazer[6] = Otvet_Lazer[7];
 2e2:	57 81       	ldd	r21, Z+7	; 0x07
 2e4:	56 83       	std	Z+6, r21	; 0x06
	Otvet_Lazer[7] = Otvet_Lazer[8];
 2e6:	80 85       	ldd	r24, Z+8	; 0x08
 2e8:	87 83       	std	Z+7, r24	; 0x07
	Otvet_Lazer[8] = Otvet_Lazer[9];
 2ea:	81 85       	ldd	r24, Z+9	; 0x09
 2ec:	80 87       	std	Z+8, r24	; 0x08
	Otvet_Lazer[9] = Otvet_Lazer[10];
 2ee:	82 85       	ldd	r24, Z+10	; 0x0a
 2f0:	81 87       	std	Z+9, r24	; 0x09
	Otvet_Lazer[10] = Otvet_Lazer[11];
 2f2:	83 85       	ldd	r24, Z+11	; 0x0b
 2f4:	82 87       	std	Z+10, r24	; 0x0a
	Otvet_Lazer[11] = UDR1;
 2f6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 2fa:	63 87       	std	Z+11, r22	; 0x0b

	numOfDataReceived_Dal++;
 2fc:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
	
	if (numOfDataReceived_Dal == numOfDataToReceive_Dal)
 306:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <numOfDataToReceive_Dal>
 30a:	87 13       	cpse	r24, r23
 30c:	4f c0       	rjmp	.+158    	; 0x3ac <__vector_36+0x10e>
	{   
	    if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E))
 30e:	90 38       	cpi	r25, 0x80	; 128
 310:	09 f0       	breq	.+2      	; 0x314 <__vector_36+0x76>
 312:	4c c0       	rjmp	.+152    	; 0x3ac <__vector_36+0x10e>
 314:	26 30       	cpi	r18, 0x06	; 6
 316:	09 f0       	breq	.+2      	; 0x31a <__vector_36+0x7c>
 318:	49 c0       	rjmp	.+146    	; 0x3ac <__vector_36+0x10e>
 31a:	33 38       	cpi	r19, 0x83	; 131
 31c:	09 f0       	breq	.+2      	; 0x320 <__vector_36+0x82>
 31e:	46 c0       	rjmp	.+140    	; 0x3ac <__vector_36+0x10e>
 320:	40 33       	cpi	r20, 0x30	; 48
 322:	09 f0       	breq	.+2      	; 0x326 <__vector_36+0x88>
 324:	43 c0       	rjmp	.+134    	; 0x3ac <__vector_36+0x10e>
 326:	5e 32       	cpi	r21, 0x2E	; 46
 328:	09 f0       	breq	.+2      	; 0x32c <__vector_36+0x8e>
 32a:	40 c0       	rjmp	.+128    	; 0x3ac <__vector_36+0x10e>
 32c:	ee e3       	ldi	r30, 0x3E	; 62
 32e:	f2 e0       	ldi	r31, 0x02	; 2
 330:	a1 e3       	ldi	r26, 0x31	; 49
 332:	b2 e0       	ldi	r27, 0x02	; 2
 334:	45 e4       	ldi	r20, 0x45	; 69
 336:	52 e0       	ldi	r21, 0x02	; 2
	    {
		    int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		    Error_j = 0;
 338:	70 e0       	ldi	r23, 0x00	; 0
	
	if (numOfDataReceived_Dal == numOfDataToReceive_Dal)
	{   
	    if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E))
	    {
		    int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
 33a:	29 e3       	ldi	r18, 0x39	; 57
 33c:	31 e0       	ldi	r19, 0x01	; 1
		    for (int i=0; i <= 6; i++)
		    {
			    j = Otvet_Lazer[i+4];
			    CS=CS+j;
			    if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			    else Error_j=1;
 33e:	c1 e0       	ldi	r28, 0x01	; 1
	    {
		    int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		    Error_j = 0;
		    for (int i=0; i <= 6; i++)
		    {
			    j = Otvet_Lazer[i+4];
 340:	81 91       	ld	r24, Z+
			    CS=CS+j;
 342:	28 0f       	add	r18, r24
 344:	31 1d       	adc	r19, r1
			    if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
 346:	90 ed       	ldi	r25, 0xD0	; 208
 348:	98 0f       	add	r25, r24
 34a:	9b 30       	cpi	r25, 0x0B	; 11
 34c:	10 f0       	brcs	.+4      	; 0x352 <__vector_36+0xb4>
 34e:	8e 32       	cpi	r24, 0x2E	; 46
 350:	11 f4       	brne	.+4      	; 0x356 <__vector_36+0xb8>
 352:	8c 93       	st	X, r24
 354:	01 c0       	rjmp	.+2      	; 0x358 <__vector_36+0xba>
			    else Error_j=1;
 356:	7c 2f       	mov	r23, r28
 358:	11 96       	adiw	r26, 0x01	; 1
	{   
	    if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E))
	    {
		    int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		    Error_j = 0;
		    for (int i=0; i <= 6; i++)
 35a:	e4 17       	cp	r30, r20
 35c:	f5 07       	cpc	r31, r21
 35e:	81 f7       	brne	.-32     	; 0x340 <__vector_36+0xa2>
 360:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <Error_j>
 364:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <j>
			    j = Otvet_Lazer[i+4];
			    CS=CS+j;
			    if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			    else Error_j=1;
		    }
		    if ((Error_j == 0) && (256 - CS % 256 == Otvet_Lazer[11]))
 368:	71 11       	cpse	r23, r1
 36a:	18 c0       	rjmp	.+48     	; 0x39c <__vector_36+0xfe>
 36c:	30 78       	andi	r19, 0x80	; 128
 36e:	33 23       	and	r19, r19
 370:	2c f4       	brge	.+10     	; 0x37c <__vector_36+0xde>
 372:	21 50       	subi	r18, 0x01	; 1
 374:	31 09       	sbc	r19, r1
 376:	3f 6f       	ori	r19, 0xFF	; 255
 378:	2f 5f       	subi	r18, 0xFF	; 255
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	ac 01       	movw	r20, r24
 382:	42 1b       	sub	r20, r18
 384:	53 0b       	sbc	r21, r19
 386:	86 2f       	mov	r24, r22
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	48 17       	cp	r20, r24
 38c:	59 07       	cpc	r21, r25
 38e:	31 f4       	brne	.+12     	; 0x39c <__vector_36+0xfe>
		    {
			    Otvet_Lazer_TXT[7] = 0x0D;              //Ставим символ переноса в конце строки
 390:	e1 e3       	ldi	r30, 0x31	; 49
 392:	f2 e0       	ldi	r31, 0x02	; 2
 394:	8d e0       	ldi	r24, 0x0D	; 13
 396:	87 83       	std	Z+7, r24	; 0x07
			    Otvet_Lazer_TXT[2] = 0x2C;              //Ставим запятую вместо точки в число на выдачу
 398:	8c e2       	ldi	r24, 0x2C	; 44
 39a:	82 83       	std	Z+2, r24	; 0x02
			}
		UCSR0B &= ~((1 << RXCIE0) | (1 << RXEN0));
 39c:	e1 ec       	ldi	r30, 0xC1	; 193
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	8f 76       	andi	r24, 0x6F	; 111
 3a4:	80 83       	st	Z, r24
		readyToExchange = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <readyToExchange>
		}
	}
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	cf 91       	pop	r28
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0b be       	out	0x3b, r0	; 59
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
>>>>>>> parent of d170438 (Optimization None)
