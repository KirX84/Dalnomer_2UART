
Dalnomer_2UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  000005fe  000006b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fe  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800160  00800160  00000712  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00000712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000070  00000000  00000000  00000788  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fcd  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000980  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005a9  00000000  00000000  00002145  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000178  00000000  00000000  000026f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000877  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000323  00000000  00000000  000030df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  00003402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9d c1       	rjmp	.+826    	; 0x388 <__vector_19>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	d4 c1       	rjmp	.+936    	; 0x41a <__vector_28>
  72:	00 00       	nop
  74:	40 c1       	rjmp	.+640    	; 0x2f6 <__vector_29>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee ef       	ldi	r30, 0xFE	; 254
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 36       	cpi	r26, 0x60	; 96
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e6       	ldi	r26, 0x60	; 96
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 38       	cpi	r26, 0x88	; 136
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	74 d0       	rcall	.+232    	; 0x1d0 <main>
  e8:	88 c2       	rjmp	.+1296   	; 0x5fa <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <_Z13UART_SendDataPhh>:
unsigned char numOfDataSended;
unsigned char numOfDataSendedUSB;
unsigned char numOfDataReceived;
/***************************************************************************************/
void UART_SendData(uint8_t *pSendData, uint8_t nNumOfDataToSend)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <_Z13UART_SendDataPhh+0x6>
  f2:	1f 92       	push	r1
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	6b 83       	std	Y+3, r22	; 0x03
    sendDataPtr = pSendData;
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <sendDataPtr+0x1>
 106:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <sendDataPtr>
    numOfDataToSend = nNumOfDataToSend;
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <numOfDataToSend>
	//uart_send(pSendData);
    numOfDataSended = 0;
 110:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <numOfDataSended>
    readyToExchange = false;
 114:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <readyToExchange>
    UCSR1B |= (1 << UDRIE1);
 118:	89 ec       	ldi	r24, 0xC9	; 201
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	29 ec       	ldi	r18, 0xC9	; 201
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	20 62       	ori	r18, 0x20	; 32
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
}
 12a:	00 00       	nop
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <_Z16UART_SendDataUSBPhh>:
/***************************************************************************************/
void UART_SendDataUSB(uint8_t *pSendData, uint8_t nNumOfDataToSend)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <_Z16UART_SendDataUSBPhh+0x6>
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	9a 83       	std	Y+2, r25	; 0x02
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	6b 83       	std	Y+3, r22	; 0x03
	sendDataPtrUSB = pSendData;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <sendDataPtrUSB+0x1>
 152:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <sendDataPtrUSB>
	numOfDataToSendUSB = nNumOfDataToSend;
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <numOfDataToSendUSB>
	numOfDataSendedUSB = 0;
 15c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <numOfDataSendedUSB>
	readyToExchangeUSB = false;
 160:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <readyToExchangeUSB>
	UCSR0B |= (1 << UDRIE0);
 164:	81 ec       	ldi	r24, 0xC1	; 193
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	21 ec       	ldi	r18, 0xC1	; 193
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	20 62       	ori	r18, 0x20	; 32
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
}
 176:	00 00       	nop
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <_Z16UART_ReceiveDataPhh>:
/***************************************************************************************/
void UART_ReceiveData(uint8_t* pReceivedData, uint8_t nNumOfDataToReceive)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <_Z16UART_ReceiveDataPhh+0x6>
 18a:	1f 92       	push	r1
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	6b 83       	std	Y+3, r22	; 0x03
    receivedDataPtr = pReceivedData;
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	9a 81       	ldd	r25, Y+2	; 0x02
 19a:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <receivedDataPtr+0x1>
 19e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <receivedDataPtr>
    numOfDataToReceive = nNumOfDataToReceive;
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <numOfDataToReceive>
    numOfDataReceived = 0;
 1a8:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <numOfDataReceived>
    readyToExchangeRec = false;
 1ac:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <readyToExchangeRec>
    UCSR1B |= (1 << RXCIE1);
 1b0:	89 ec       	ldi	r24, 0xC9	; 201
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	29 ec       	ldi	r18, 0xC9	; 201
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	20 68       	ori	r18, 0x80	; 128
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
}
 1c2:	00 00       	nop
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:
/***************************************************************************************/
int main(void)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
	if(eeprom_read_byte(&num_dal_addr) == 0xFFFF) num_dal = 0;
	else num_dal = eeprom_read_byte(&num_dal_addr);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	06 d2       	rcall	.+1036   	; 0x5ea <eeprom_read_byte>
 1de:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <num_dal>
	if(eeprom_read_byte(&op_mode_addr) == 0xFFFF) op_mode = 0;
	else num_dal = eeprom_read_byte(&op_mode_addr);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 d2       	rcall	.+1026   	; 0x5ea <eeprom_read_byte>
 1e8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <num_dal>
	if(!(num_dal/10))
 1ec:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <num_dal>
 1f0:	8a 30       	cpi	r24, 0x0A	; 10
 1f2:	a8 f4       	brcc	.+42     	; 0x21e <main+0x4e>
	{
		Zapros_one_zam_one[1] = '0x30' + op_mode;
 1f4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <op_mode>
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Zapros_one_zam_one+0x1>
		Zapros_nepr_zam_one[1] = '0x30'+ op_mode;
 1fe:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <op_mode>
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Zapros_nepr_zam_one+0x1>
		Zapros_number_one[1] = '0x30'+ op_mode;
 208:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <op_mode>
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Zapros_number_one+0x1>
		Zapros_save_one[1] = '0x30'+ op_mode;
 212:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <op_mode>
 216:	80 5d       	subi	r24, 0xD0	; 208
 218:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <Zapros_save_one+0x1>
 21c:	18 c0       	rjmp	.+48     	; 0x24e <main+0x7e>
	}
	else
	{
		Zapros_one_zam_two[1] = '0x30';
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <Zapros_one_zam_two+0x1>
		Zapros_one_zam_two[2] = '0x30';
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Zapros_one_zam_two+0x2>
		Zapros_nepr_zam_two[1] = '0x30';
 22a:	80 e3       	ldi	r24, 0x30	; 48
 22c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <Zapros_nepr_zam_two+0x1>
		Zapros_nepr_zam_two[2] = '0x30';
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <Zapros_nepr_zam_two+0x2>
		Zapros_number_two[1] = '0x30';
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Zapros_number_two+0x1>
		Zapros_number_two[2] = '0x30';
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Zapros_number_two+0x2>
		Zapros_save_two[1] = '0x30';
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Zapros_save_two+0x1>
		Zapros_save_two[2] = '0x30';
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Zapros_save_two+0x2>
	}
	

	//eeprom_write_byte(&num_dal_addr, num_dal);
    sei();
 24e:	78 94       	sei

	UBRR0H = 0;
 250:	85 ec       	ldi	r24, 0xC5	; 197
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	10 82       	st	Z, r1
	UBRR0L = 103; //скорость 9600
 258:	84 ec       	ldi	r24, 0xC4	; 196
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	27 e6       	ldi	r18, 0x67	; 103
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
	//UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<UDRIE0); // разрешаем прием, передачу и прерывания по окончанию приема и опустошению буфера
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // разрешаем прием, передачу
 262:	81 ec       	ldi	r24, 0xC1	; 193
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	28 e1       	ldi	r18, 0x18	; 24
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); //8 бит, 1 стоп бит
 26c:	82 ec       	ldi	r24, 0xC2	; 194
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	26 e0       	ldi	r18, 0x06	; 6
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
	UBRR1H = 0;
 276:	8d ec       	ldi	r24, 0xCD	; 205
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	10 82       	st	Z, r1
	UBRR1L = 103; //скорость 9600
 27e:	8c ec       	ldi	r24, 0xCC	; 204
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	27 e6       	ldi	r18, 0x67	; 103
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
	//UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1)|(1<<UDRIE1); // разрешаем прием, передачу и прерывания по окончанию приема и опустошению буфера
	UCSR1B = (1<<RXEN1)|(1<<TXEN1); // разрешаем прием, передачу
 288:	89 ec       	ldi	r24, 0xC9	; 201
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	28 e1       	ldi	r18, 0x18	; 24
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11)|(1<<UCSZ10); //8 бит, 1 стоп бит
 292:	8a ec       	ldi	r24, 0xCA	; 202
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	26 e0       	ldi	r18, 0x06	; 6
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
	UBRR0 = AVR_USART_9600_VALUE;
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
	//uart_init();
	//UCSR1B |= (1 << RXEN1) | (1 << RXCIE1);
	//_delay_ms(10);*/
	UART_SendData(Lazer_0c,5);
 29c:	65 e0       	ldi	r22, 0x05	; 5
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	24 df       	rcall	.-440    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 2a4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <readyToExchange>
 2a8:	88 23       	and	r24, r24
 2aa:	09 f4       	brne	.+2      	; 0x2ae <main+0xde>
 2ac:	fb cf       	rjmp	.-10     	; 0x2a4 <main+0xd4>
	//_delay_ms(10);
	UART_SendData(Lazer_1g,5);
 2ae:	65 e0       	ldi	r22, 0x05	; 5
 2b0:	88 e0       	ldi	r24, 0x08	; 8
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	1b df       	rcall	.-458    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 2b6:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <readyToExchange>
 2ba:	88 23       	and	r24, r24
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <main+0xf0>
	//_delay_ms(10);
	UART_SendData(Lazer_nepr_zam,4);
 2be:	fb cf       	rjmp	.-10     	; 0x2b6 <main+0xe6>
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	80 e1       	ldi	r24, 0x10	; 16
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	12 df       	rcall	.-476    	; 0xec <_Z13UART_SendDataPhh>
	while(!readyToExchange);
 2c8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <readyToExchange>
 2cc:	88 23       	and	r24, r24
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <main+0x102>
	"\x67\x30\x73\x76\x2B\x30\x30",
	 sizeof testBuffer);*/
	//testBuffer = {0x67, 0x30, 0x73, 0x76, 0x2B, 0x30, 0x30};
    while(1)
    {
        UART_ReceiveData(Otvet_Lazer, 12);
 2d0:	fb cf       	rjmp	.-10     	; 0x2c8 <main+0xf8>
 2d2:	6c e0       	ldi	r22, 0x0C	; 12
 2d4:	80 e6       	ldi	r24, 0x60	; 96
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	55 df       	rcall	.-342    	; 0x184 <_Z16UART_ReceiveDataPhh>
		while(!readyToExchangeRec);
 2da:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <readyToExchangeRec>
 2de:	88 23       	and	r24, r24
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <main+0x114>
		//_delay_ms(150);
		UART_SendDataUSB(Otvet_Lazer_TXT, 8);
 2e2:	fb cf       	rjmp	.-10     	; 0x2da <main+0x10a>
 2e4:	68 e0       	ldi	r22, 0x08	; 8
 2e6:	8c e6       	ldi	r24, 0x6C	; 108
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	26 df       	rcall	.-436    	; 0x138 <_Z16UART_SendDataUSBPhh>
		while(!readyToExchangeUSB);
 2ec:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <readyToExchangeUSB>
 2f0:	88 23       	and	r24, r24
 2f2:	79 f7       	brne	.-34     	; 0x2d2 <main+0x102>
 2f4:	fb cf       	rjmp	.-10     	; 0x2ec <main+0x11c>

000002f6 <__vector_29>:
		//_delay_ms(150);
    }
}
/***************************************************************************************/
ISR(USART1_UDRE_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
    UDR1 = *sendDataPtr;
 316:	8e ec       	ldi	r24, 0xCE	; 206
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <sendDataPtr>
 31e:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <sendDataPtr+0x1>
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	fc 01       	movw	r30, r24
 328:	20 83       	st	Z, r18
    sendDataPtr++;
 32a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <sendDataPtr>
 32e:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <sendDataPtr+0x1>
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <sendDataPtr+0x1>
 338:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <sendDataPtr>
    numOfDataSended++;
 33c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <numOfDataSended>
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <numOfDataSended>
    
    if (numOfDataSended == numOfDataToSend)
 346:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <numOfDataSended>
 34a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <numOfDataToSend>
 34e:	98 17       	cp	r25, r24
 350:	61 f4       	brne	.+24     	; 0x36a <__vector_29+0x74>
    {
        UCSR1B &= ~(1 << UDRIE1);
 352:	89 ec       	ldi	r24, 0xC9	; 201
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	29 ec       	ldi	r18, 0xC9	; 201
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	2f 7d       	andi	r18, 0xDF	; 223
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
        readyToExchange = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <readyToExchange>
    }
}
 36a:	00 00       	nop
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_19>:
/***************************************************************************************/
ISR(USART0_UDRE_vect)
{
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	2f 93       	push	r18
 396:	3f 93       	push	r19
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
	UDR0 = *sendDataPtrUSB;
 3a8:	86 ec       	ldi	r24, 0xC6	; 198
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <sendDataPtrUSB>
 3b0:	30 91 82 01 	lds	r19, 0x0182	; 0x800182 <sendDataPtrUSB+0x1>
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
	sendDataPtrUSB++;
 3bc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <sendDataPtrUSB>
 3c0:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <sendDataPtrUSB+0x1>
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <sendDataPtrUSB+0x1>
 3ca:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <sendDataPtrUSB>
	numOfDataSendedUSB++;
 3ce:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <numOfDataSendedUSB>
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
 3d4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <numOfDataSendedUSB>
	
	if (numOfDataSendedUSB == numOfDataToSendUSB)
 3d8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <numOfDataSendedUSB>
 3dc:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <numOfDataToSendUSB>
 3e0:	98 17       	cp	r25, r24
 3e2:	61 f4       	brne	.+24     	; 0x3fc <__vector_19+0x74>
	{
		UCSR0B &= ~(1 << UDRIE0);
 3e4:	81 ec       	ldi	r24, 0xC1	; 193
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	21 ec       	ldi	r18, 0xC1	; 193
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	20 81       	ld	r18, Z
 3f0:	2f 7d       	andi	r18, 0xDF	; 223
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
		readyToExchangeUSB = 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <readyToExchangeUSB>
	}
}
 3fc:	00 00       	nop
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_28>:
/***************************************************************************************/
ISR(USART1_RX_vect)
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	2f 93       	push	r18
 428:	3f 93       	push	r19
 42a:	4f 93       	push	r20
 42c:	5f 93       	push	r21
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	00 d0       	rcall	.+0      	; 0x43c <__vector_28+0x22>
 43c:	00 d0       	rcall	.+0      	; 0x43e <__vector_28+0x24>
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
		UCSR1B &= ~((1 << RXCIE1) | (1 << RXEN1));
		readyToExchangeRec = 1;
	}*/


    Otvet_Lazer[0] = Otvet_Lazer[1];
 442:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <__data_end+0x1>
 446:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
    Otvet_Lazer[1] = Otvet_Lazer[2];
 44a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end+0x2>
 44e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__data_end+0x1>
    Otvet_Lazer[2] = Otvet_Lazer[3];
 452:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <__data_end+0x3>
 456:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end+0x2>
    Otvet_Lazer[3] = Otvet_Lazer[4];
 45a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end+0x4>
 45e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__data_end+0x3>
    Otvet_Lazer[4] = Otvet_Lazer[5];
 462:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <__data_end+0x5>
 466:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end+0x4>
    Otvet_Lazer[5] = Otvet_Lazer[6];
 46a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end+0x6>
 46e:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <__data_end+0x5>
    Otvet_Lazer[6] = Otvet_Lazer[7];
 472:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <__data_end+0x7>
 476:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end+0x6>
    Otvet_Lazer[7] = Otvet_Lazer[8];
 47a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end+0x8>
 47e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <__data_end+0x7>
    Otvet_Lazer[8] = Otvet_Lazer[9];
 482:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <__data_end+0x9>
 486:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end+0x8>
    Otvet_Lazer[9] = Otvet_Lazer[10];
 48a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end+0xa>
 48e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__data_end+0x9>
    Otvet_Lazer[10] = Otvet_Lazer[11];
 492:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <__data_end+0xb>
 496:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end+0xa>
    Otvet_Lazer[11] = UDR1;
 49a:	8e ec       	ldi	r24, 0xCE	; 206
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	fc 01       	movw	r30, r24
 4a0:	80 81       	ld	r24, Z
 4a2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <__data_end+0xb>

	//UART_SendDataUSB(Otvet_Lazer, 12);
    //*receivedDataPtr = UDR1;

	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E)) 
 4a6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 4aa:	80 38       	cpi	r24, 0x80	; 128
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <__vector_28+0x96>
 4ae:	88 c0       	rjmp	.+272    	; 0x5c0 <__vector_28+0x1a6>
 4b0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <__data_end+0x1>
 4b4:	86 30       	cpi	r24, 0x06	; 6
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__vector_28+0xa0>
 4b8:	83 c0       	rjmp	.+262    	; 0x5c0 <__vector_28+0x1a6>
 4ba:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end+0x2>
 4be:	83 38       	cpi	r24, 0x83	; 131
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__vector_28+0xaa>
 4c2:	7e c0       	rjmp	.+252    	; 0x5c0 <__vector_28+0x1a6>
 4c4:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <__data_end+0x3>
 4c8:	80 33       	cpi	r24, 0x30	; 48
 4ca:	09 f0       	breq	.+2      	; 0x4ce <__vector_28+0xb4>
 4cc:	79 c0       	rjmp	.+242    	; 0x5c0 <__vector_28+0x1a6>
 4ce:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end+0x6>
 4d2:	8e 32       	cpi	r24, 0x2E	; 46
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__vector_28+0xbe>
 4d6:	74 c0       	rjmp	.+232    	; 0x5c0 <__vector_28+0x1a6>
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
 4d8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <__data_end+0x1>
 4e4:	88 2f       	mov	r24, r24
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	28 0f       	add	r18, r24
 4ea:	39 1f       	adc	r19, r25
 4ec:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end+0x2>
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	28 0f       	add	r18, r24
 4f6:	39 1f       	adc	r19, r25
 4f8:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <__data_end+0x3>
 4fc:	88 2f       	mov	r24, r24
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	82 0f       	add	r24, r18
 502:	93 1f       	adc	r25, r19
 504:	9a 83       	std	Y+2, r25	; 0x02
 506:	89 83       	std	Y+1, r24	; 0x01
		Error_j = 0;
 508:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <Error_j>
		for (int i=0; i <= 6; i++) 
 50c:	1c 82       	std	Y+4, r1	; 0x04
 50e:	1b 82       	std	Y+3, r1	; 0x03
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	9c 81       	ldd	r25, Y+4	; 0x04
 514:	07 97       	sbiw	r24, 0x07	; 7
 516:	8c f5       	brge	.+98     	; 0x57a <__vector_28+0x160>
		{
			j = Otvet_Lazer[i+4];
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	9c 81       	ldd	r25, Y+4	; 0x04
 51c:	04 96       	adiw	r24, 0x04	; 4
 51e:	80 5a       	subi	r24, 0xA0	; 160
 520:	9e 4f       	sbci	r25, 0xFE	; 254
 522:	fc 01       	movw	r30, r24
 524:	80 81       	ld	r24, Z
 526:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <j>
			CS=CS+j;
 52a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <j>
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	29 81       	ldd	r18, Y+1	; 0x01
 534:	3a 81       	ldd	r19, Y+2	; 0x02
 536:	82 0f       	add	r24, r18
 538:	93 1f       	adc	r25, r19
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	89 83       	std	Y+1, r24	; 0x01
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
 53e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <j>
 542:	80 33       	cpi	r24, 0x30	; 48
 544:	20 f0       	brcs	.+8      	; 0x54e <__vector_28+0x134>
 546:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <j>
 54a:	8b 33       	cpi	r24, 0x3B	; 59
 54c:	20 f0       	brcs	.+8      	; 0x556 <__vector_28+0x13c>
 54e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <j>
 552:	8e 32       	cpi	r24, 0x2E	; 46
 554:	49 f4       	brne	.+18     	; 0x568 <__vector_28+0x14e>
 556:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <j>
 55a:	8b 81       	ldd	r24, Y+3	; 0x03
 55c:	9c 81       	ldd	r25, Y+4	; 0x04
 55e:	84 59       	subi	r24, 0x94	; 148
 560:	9e 4f       	sbci	r25, 0xFE	; 254
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18
 566:	03 c0       	rjmp	.+6      	; 0x56e <__vector_28+0x154>
			else Error_j=1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <Error_j>

	if ((Otvet_Lazer[0]==0x80) && (Otvet_Lazer[1]==0x06) && (Otvet_Lazer[2]==0x83) && (Otvet_Lazer[3]==0x30) && (Otvet_Lazer[6]==0x2E)) 
	{
		int CS = Otvet_Lazer[0]+Otvet_Lazer[1]+Otvet_Lazer[2]+Otvet_Lazer[3];
		Error_j = 0;
		for (int i=0; i <= 6; i++) 
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	9c 81       	ldd	r25, Y+4	; 0x04
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	9c 83       	std	Y+4, r25	; 0x04
 576:	8b 83       	std	Y+3, r24	; 0x03
 578:	cb cf       	rjmp	.-106    	; 0x510 <__vector_28+0xf6>
			j = Otvet_Lazer[i+4];
			CS=CS+j;
			if (((j > 47) && (j < 59)) || (j==0x2E)) Otvet_Lazer_TXT[i] = j;
			else Error_j=1;
		}
		if ((Error_j == 0) && (256 - CS % 256 == Otvet_Lazer[11])) 
 57a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Error_j>
 57e:	88 23       	and	r24, r24
 580:	f9 f4       	brne	.+62     	; 0x5c0 <__vector_28+0x1a6>
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	9a 81       	ldd	r25, Y+2	; 0x02
 586:	90 78       	andi	r25, 0x80	; 128
 588:	99 23       	and	r25, r25
 58a:	1c f4       	brge	.+6      	; 0x592 <__vector_28+0x178>
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	9f 6f       	ori	r25, 0xFF	; 255
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	9c 01       	movw	r18, r24
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	ac 01       	movw	r20, r24
 59a:	42 1b       	sub	r20, r18
 59c:	53 0b       	sbc	r21, r19
 59e:	9a 01       	movw	r18, r20
 5a0:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <__data_end+0xb>
 5a4:	88 2f       	mov	r24, r24
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	28 17       	cp	r18, r24
 5aa:	39 07       	cpc	r19, r25
 5ac:	49 f4       	brne	.+18     	; 0x5c0 <__vector_28+0x1a6>
		{
			Otvet_Lazer_TXT[7] = 0x0D;              //Ставим символ переноса в конце строки
 5ae:	8d e0       	ldi	r24, 0x0D	; 13
 5b0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Otvet_Lazer_TXT+0x7>
			Otvet_Lazer_TXT[2] = 0x2C;              //Ставим запятую вместо точки в число на выдачу
 5b4:	8c e2       	ldi	r24, 0x2C	; 44
 5b6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <Otvet_Lazer_TXT+0x2>
			//UART_SendDataUSB(Otvet_Lazer_TXT, 8);
			//while(!readyToExchangeUSB);
			//_delay_ms(150);
			readyToExchangeRec = 1;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <readyToExchangeRec>
    /*if (numOfDataReceived == numOfDataToReceive)
    {
        UCSR1B &= ~((1 << RXCIE1) | (1 << RXEN1));
        readyToExchangeUSB = 1;
    }*/
}
 5c0:	00 00       	nop
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	9f 91       	pop	r25
 5d4:	8f 91       	pop	r24
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <eeprom_read_byte>:
 5ea:	f9 99       	sbic	0x1f, 1	; 31
 5ec:	fe cf       	rjmp	.-4      	; 0x5ea <eeprom_read_byte>
 5ee:	92 bd       	out	0x22, r25	; 34
 5f0:	81 bd       	out	0x21, r24	; 33
 5f2:	f8 9a       	sbi	0x1f, 0	; 31
 5f4:	99 27       	eor	r25, r25
 5f6:	80 b5       	in	r24, 0x20	; 32
 5f8:	08 95       	ret

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>
